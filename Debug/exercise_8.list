
exercise_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004190  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080042a0  080042a0  000052a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800437c  0800437c  00006064  2**0
                  CONTENTS
  4 .ARM          00000000  0800437c  0800437c  00006064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800437c  0800437c  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800437c  0800437c  0000537c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004380  08004380  00005380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08004384  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011ac  20000064  080043e8  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001210  080043e8  00006210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa7b  00000000  00000000  0000608d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a06  00000000  00000000  00015b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00018510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b8f  00000000  00000000  00019420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a0c  00000000  00000000  00019faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010824  00000000  00000000  000329bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000902de  00000000  00000000  000431df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d34bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a8  00000000  00000000  000d3500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000d75a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08004288 	.word	0x08004288

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08004288 	.word	0x08004288

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000080 	.word	0x20000080
 800017c:	20000120 	.word	0x20000120

08000180 <AccessSharedData>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void AccessSharedData() {
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
        if (StartFlag == 1) {
 8000184:	4b0e      	ldr	r3, [pc, #56]	@ (80001c0 <AccessSharedData+0x40>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	2b01      	cmp	r3, #1
 800018a:	d103      	bne.n	8000194 <AccessSharedData+0x14>
            StartFlag = 0;  // Set Start flag ke Down
 800018c:	4b0c      	ldr	r3, [pc, #48]	@ (80001c0 <AccessSharedData+0x40>)
 800018e:	2200      	movs	r2, #0
 8000190:	701a      	strb	r2, [r3, #0]
 8000192:	e005      	b.n	80001a0 <AccessSharedData+0x20>
        } else {
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);  // Nyalakan Blue LED
 8000194:	2201      	movs	r2, #1
 8000196:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800019a:	480a      	ldr	r0, [pc, #40]	@ (80001c4 <AccessSharedData+0x44>)
 800019c:	f000 fd48 	bl	8000c30 <HAL_GPIO_WritePin>
        }

        // Langkah 2: Simulasi operasi baca/tulis selama satu detik
        //SimulateReadWriteOperation();
        HAL_Delay(1000);
 80001a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001a4:	f000 fabc 	bl	8000720 <HAL_Delay>

        StartFlag = 1;
 80001a8:	4b05      	ldr	r3, [pc, #20]	@ (80001c0 <AccessSharedData+0x40>)
 80001aa:	2201      	movs	r2, #1
 80001ac:	701a      	strb	r2, [r3, #0]
        // Langkah 3: Matikan Blue LED (opsional, jika kita ingin LED mati setelah kontensi)
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80001ae:	2200      	movs	r2, #0
 80001b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <AccessSharedData+0x44>)
 80001b6:	f000 fd3b 	bl	8000c30 <HAL_GPIO_WritePin>

        // Langkah 4: Set Start flag ke Up
}
 80001ba:	bf00      	nop
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	20000000 	.word	0x20000000
 80001c4:	40010800 	.word	0x40010800

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b5b0      	push	{r4, r5, r7, lr}
 80001ca:	b09e      	sub	sp, #120	@ 0x78
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fa75 	bl	80006bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f86f 	bl	80002b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f8a9 	bl	800032c <MX_GPIO_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of CriticalResourceSemaphore */
  osSemaphoreDef(CriticalResourceSemaphore);
 80001da:	2300      	movs	r3, #0
 80001dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80001de:	2300      	movs	r3, #0
 80001e0:	677b      	str	r3, [r7, #116]	@ 0x74
  CriticalResourceSemaphoreHandle = osSemaphoreCreate(osSemaphore(CriticalResourceSemaphore), 1);
 80001e2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80001e6:	2101      	movs	r1, #1
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 fc58 	bl	8001a9e <osSemaphoreCreate>
 80001ee:	4603      	mov	r3, r0
 80001f0:	4a27      	ldr	r2, [pc, #156]	@ (8000290 <main+0xc8>)
 80001f2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001f4:	4b27      	ldr	r3, [pc, #156]	@ (8000294 <main+0xcc>)
 80001f6:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80001fa:	461d      	mov	r5, r3
 80001fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000200:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000204:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000208:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f001 fbe5 	bl	80019de <osThreadCreate>
 8000214:	4603      	mov	r3, r0
 8000216:	4a20      	ldr	r2, [pc, #128]	@ (8000298 <main+0xd0>)
 8000218:	6013      	str	r3, [r2, #0]

  /* definition and creation of greenLEDTask */
  osThreadDef(greenLEDTask, greenLED, osPriorityNormal, 0, 128);
 800021a:	4b20      	ldr	r3, [pc, #128]	@ (800029c <main+0xd4>)
 800021c:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000220:	461d      	mov	r5, r3
 8000222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000226:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800022a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  greenLEDTaskHandle = osThreadCreate(osThread(greenLEDTask), NULL);
 800022e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000232:	2100      	movs	r1, #0
 8000234:	4618      	mov	r0, r3
 8000236:	f001 fbd2 	bl	80019de <osThreadCreate>
 800023a:	4603      	mov	r3, r0
 800023c:	4a18      	ldr	r2, [pc, #96]	@ (80002a0 <main+0xd8>)
 800023e:	6013      	str	r3, [r2, #0]

  /* definition and creation of redLEDTask */
  osThreadDef(redLEDTask, redLED, osPriorityNormal, 0, 128);
 8000240:	4b18      	ldr	r3, [pc, #96]	@ (80002a4 <main+0xdc>)
 8000242:	f107 041c 	add.w	r4, r7, #28
 8000246:	461d      	mov	r5, r3
 8000248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800024a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800024c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000250:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  redLEDTaskHandle = osThreadCreate(osThread(redLEDTask), NULL);
 8000254:	f107 031c 	add.w	r3, r7, #28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f001 fbbf 	bl	80019de <osThreadCreate>
 8000260:	4603      	mov	r3, r0
 8000262:	4a11      	ldr	r2, [pc, #68]	@ (80002a8 <main+0xe0>)
 8000264:	6013      	str	r3, [r2, #0]

  /* definition and creation of orangeLEDTask */
  osThreadDef(orangeLEDTask, orangeLED, osPriorityAboveNormal, 0, 128);
 8000266:	4b11      	ldr	r3, [pc, #68]	@ (80002ac <main+0xe4>)
 8000268:	463c      	mov	r4, r7
 800026a:	461d      	mov	r5, r3
 800026c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800026e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000270:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000274:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  orangeLEDTaskHandle = osThreadCreate(osThread(orangeLEDTask), NULL);
 8000278:	463b      	mov	r3, r7
 800027a:	2100      	movs	r1, #0
 800027c:	4618      	mov	r0, r3
 800027e:	f001 fbae 	bl	80019de <osThreadCreate>
 8000282:	4603      	mov	r3, r0
 8000284:	4a0a      	ldr	r2, [pc, #40]	@ (80002b0 <main+0xe8>)
 8000286:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000288:	f001 fba2 	bl	80019d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800028c:	bf00      	nop
 800028e:	e7fd      	b.n	800028c <main+0xc4>
 8000290:	20000330 	.word	0x20000330
 8000294:	080042ac 	.word	0x080042ac
 8000298:	20000320 	.word	0x20000320
 800029c:	080042d8 	.word	0x080042d8
 80002a0:	20000324 	.word	0x20000324
 80002a4:	08004300 	.word	0x08004300
 80002a8:	20000328 	.word	0x20000328
 80002ac:	0800432c 	.word	0x0800432c
 80002b0:	2000032c 	.word	0x2000032c

080002b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b090      	sub	sp, #64	@ 0x40
 80002b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ba:	f107 0318 	add.w	r3, r7, #24
 80002be:	2228      	movs	r2, #40	@ 0x28
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f003 fefa 	bl	80040bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
 80002d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d6:	2302      	movs	r3, #2
 80002d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002da:	2301      	movs	r3, #1
 80002dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002de:	2310      	movs	r3, #16
 80002e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e2:	2300      	movs	r3, #0
 80002e4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e6:	f107 0318 	add.w	r3, r7, #24
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 fcd2 	bl	8000c94 <HAL_RCC_OscConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002f6:	f000 f8d5 	bl	80004a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fa:	230f      	movs	r3, #15
 80002fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002fe:	2300      	movs	r3, #0
 8000300:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2100      	movs	r1, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f000 ff40 	bl	8001198 <HAL_RCC_ClockConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800031e:	f000 f8c1 	bl	80004a4 <Error_Handler>
  }
}
 8000322:	bf00      	nop
 8000324:	3740      	adds	r7, #64	@ 0x40
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
	...

0800032c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b086      	sub	sp, #24
 8000330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000332:	f107 0308 	add.w	r3, r7, #8
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000340:	4b12      	ldr	r3, [pc, #72]	@ (800038c <MX_GPIO_Init+0x60>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a11      	ldr	r2, [pc, #68]	@ (800038c <MX_GPIO_Init+0x60>)
 8000346:	f043 0304 	orr.w	r3, r3, #4
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b0f      	ldr	r3, [pc, #60]	@ (800038c <MX_GPIO_Init+0x60>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0304 	and.w	r3, r3, #4
 8000354:	607b      	str	r3, [r7, #4]
 8000356:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ORANGE_Pin|GREEN_Pin|BLUE_Pin|RED_Pin, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	f44f 6170 	mov.w	r1, #3840	@ 0xf00
 800035e:	480c      	ldr	r0, [pc, #48]	@ (8000390 <MX_GPIO_Init+0x64>)
 8000360:	f000 fc66 	bl	8000c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ORANGE_Pin GREEN_Pin BLUE_Pin RED_Pin */
  GPIO_InitStruct.Pin = ORANGE_Pin|GREEN_Pin|BLUE_Pin|RED_Pin;
 8000364:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000368:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800036a:	2301      	movs	r3, #1
 800036c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036e:	2300      	movs	r3, #0
 8000370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000372:	2302      	movs	r3, #2
 8000374:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000376:	f107 0308 	add.w	r3, r7, #8
 800037a:	4619      	mov	r1, r3
 800037c:	4804      	ldr	r0, [pc, #16]	@ (8000390 <MX_GPIO_Init+0x64>)
 800037e:	f000 fad3 	bl	8000928 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000382:	bf00      	nop
 8000384:	3718      	adds	r7, #24
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	40021000 	.word	0x40021000
 8000390:	40010800 	.word	0x40010800

08000394 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800039c:	2001      	movs	r0, #1
 800039e:	f001 fb6a 	bl	8001a76 <osDelay>
 80003a2:	e7fb      	b.n	800039c <StartDefaultTask+0x8>

080003a4 <greenLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_greenLED */
void greenLED(void const * argument)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN greenLED */
  /* Infinite loop */
	for(;;)
		{
		    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);  // Nyalakan LED Hijau
 80003ac:	2201      	movs	r2, #1
 80003ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003b2:	4810      	ldr	r0, [pc, #64]	@ (80003f4 <greenLED+0x50>)
 80003b4:	f000 fc3c 	bl	8000c30 <HAL_GPIO_WritePin>
		    osSemaphoreWait(CriticalResourceSemaphoreHandle, WaitTimeMilliseconds);
 80003b8:	4b0f      	ldr	r3, [pc, #60]	@ (80003f8 <greenLED+0x54>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a0f      	ldr	r2, [pc, #60]	@ (80003fc <greenLED+0x58>)
 80003be:	8812      	ldrh	r2, [r2, #0]
 80003c0:	4611      	mov	r1, r2
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 fb9e 	bl	8001b04 <osSemaphoreWait>
		    AccessSharedData();
 80003c8:	f7ff feda 	bl	8000180 <AccessSharedData>
		    osSemaphoreRelease (CriticalResourceSemaphoreHandle);
 80003cc:	4b0a      	ldr	r3, [pc, #40]	@ (80003f8 <greenLED+0x54>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4618      	mov	r0, r3
 80003d2:	f001 fbe5 	bl	8001ba0 <osSemaphoreRelease>
		    osDelay(200);
 80003d6:	20c8      	movs	r0, #200	@ 0xc8
 80003d8:	f001 fb4d 	bl	8001a76 <osDelay>
		    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);  // Matikan LED Hijau
 80003dc:	2200      	movs	r2, #0
 80003de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003e2:	4804      	ldr	r0, [pc, #16]	@ (80003f4 <greenLED+0x50>)
 80003e4:	f000 fc24 	bl	8000c30 <HAL_GPIO_WritePin>
		    osDelay(200);
 80003e8:	20c8      	movs	r0, #200	@ 0xc8
 80003ea:	f001 fb44 	bl	8001a76 <osDelay>
		    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);  // Nyalakan LED Hijau
 80003ee:	bf00      	nop
 80003f0:	e7dc      	b.n	80003ac <greenLED+0x8>
 80003f2:	bf00      	nop
 80003f4:	40010800 	.word	0x40010800
 80003f8:	20000330 	.word	0x20000330
 80003fc:	20000334 	.word	0x20000334

08000400 <redLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_redLED */
void redLED(void const * argument)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN redLED */
  /* Infinite loop */
	for(;;)
		{
		    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);  // Nyalakan LED Merah
 8000408:	2201      	movs	r2, #1
 800040a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800040e:	4811      	ldr	r0, [pc, #68]	@ (8000454 <redLED+0x54>)
 8000410:	f000 fc0e 	bl	8000c30 <HAL_GPIO_WritePin>
		    osSemaphoreWait(CriticalResourceSemaphoreHandle, WaitTimeMilliseconds);
 8000414:	4b10      	ldr	r3, [pc, #64]	@ (8000458 <redLED+0x58>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a10      	ldr	r2, [pc, #64]	@ (800045c <redLED+0x5c>)
 800041a:	8812      	ldrh	r2, [r2, #0]
 800041c:	4611      	mov	r1, r2
 800041e:	4618      	mov	r0, r3
 8000420:	f001 fb70 	bl	8001b04 <osSemaphoreWait>
		    AccessSharedData();
 8000424:	f7ff feac 	bl	8000180 <AccessSharedData>
		    osSemaphoreRelease (CriticalResourceSemaphoreHandle);
 8000428:	4b0b      	ldr	r3, [pc, #44]	@ (8000458 <redLED+0x58>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4618      	mov	r0, r3
 800042e:	f001 fbb7 	bl	8001ba0 <osSemaphoreRelease>
		    osDelay(550);
 8000432:	f240 2026 	movw	r0, #550	@ 0x226
 8000436:	f001 fb1e 	bl	8001a76 <osDelay>
		    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);  // Matikan LED Merah
 800043a:	2200      	movs	r2, #0
 800043c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000440:	4804      	ldr	r0, [pc, #16]	@ (8000454 <redLED+0x54>)
 8000442:	f000 fbf5 	bl	8000c30 <HAL_GPIO_WritePin>
		    osDelay(550);
 8000446:	f240 2026 	movw	r0, #550	@ 0x226
 800044a:	f001 fb14 	bl	8001a76 <osDelay>
		    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);  // Nyalakan LED Merah
 800044e:	bf00      	nop
 8000450:	e7da      	b.n	8000408 <redLED+0x8>
 8000452:	bf00      	nop
 8000454:	40010800 	.word	0x40010800
 8000458:	20000330 	.word	0x20000330
 800045c:	20000334 	.word	0x20000334

08000460 <orangeLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_orangeLED */
void orangeLED(void const * argument)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN orangeLED */
  /* Infinite loop */
	  for(;;)
	  {
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000468:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800046c:	4803      	ldr	r0, [pc, #12]	@ (800047c <orangeLED+0x1c>)
 800046e:	f000 fbf7 	bl	8000c60 <HAL_GPIO_TogglePin>
		  osDelay(50);
 8000472:	2032      	movs	r0, #50	@ 0x32
 8000474:	f001 faff 	bl	8001a76 <osDelay>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 8000478:	bf00      	nop
 800047a:	e7f5      	b.n	8000468 <orangeLED+0x8>
 800047c:	40010800 	.word	0x40010800

08000480 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a04      	ldr	r2, [pc, #16]	@ (80004a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d101      	bne.n	8000496 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000492:	f000 f929 	bl	80006e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40000800 	.word	0x40000800

080004a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a8:	b672      	cpsid	i
}
 80004aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ac:	bf00      	nop
 80004ae:	e7fd      	b.n	80004ac <Error_Handler+0x8>

080004b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b084      	sub	sp, #16
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004b6:	4b18      	ldr	r3, [pc, #96]	@ (8000518 <HAL_MspInit+0x68>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	4a17      	ldr	r2, [pc, #92]	@ (8000518 <HAL_MspInit+0x68>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6193      	str	r3, [r2, #24]
 80004c2:	4b15      	ldr	r3, [pc, #84]	@ (8000518 <HAL_MspInit+0x68>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	60bb      	str	r3, [r7, #8]
 80004cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ce:	4b12      	ldr	r3, [pc, #72]	@ (8000518 <HAL_MspInit+0x68>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	4a11      	ldr	r2, [pc, #68]	@ (8000518 <HAL_MspInit+0x68>)
 80004d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004d8:	61d3      	str	r3, [r2, #28]
 80004da:	4b0f      	ldr	r3, [pc, #60]	@ (8000518 <HAL_MspInit+0x68>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	210f      	movs	r1, #15
 80004ea:	f06f 0001 	mvn.w	r0, #1
 80004ee:	f000 f9f0 	bl	80008d2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004f2:	4b0a      	ldr	r3, [pc, #40]	@ (800051c <HAL_MspInit+0x6c>)
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	4a04      	ldr	r2, [pc, #16]	@ (800051c <HAL_MspInit+0x6c>)
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050e:	bf00      	nop
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40021000 	.word	0x40021000
 800051c:	40010000 	.word	0x40010000

08000520 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b08e      	sub	sp, #56	@ 0x38
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000528:	2300      	movs	r3, #0
 800052a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800052c:	2300      	movs	r3, #0
 800052e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000530:	2300      	movs	r3, #0
 8000532:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000536:	4b34      	ldr	r3, [pc, #208]	@ (8000608 <HAL_InitTick+0xe8>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	4a33      	ldr	r2, [pc, #204]	@ (8000608 <HAL_InitTick+0xe8>)
 800053c:	f043 0304 	orr.w	r3, r3, #4
 8000540:	61d3      	str	r3, [r2, #28]
 8000542:	4b31      	ldr	r3, [pc, #196]	@ (8000608 <HAL_InitTick+0xe8>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	f003 0304 	and.w	r3, r3, #4
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800054e:	f107 0210 	add.w	r2, r7, #16
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	4611      	mov	r1, r2
 8000558:	4618      	mov	r0, r3
 800055a:	f000 ff79 	bl	8001450 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800055e:	6a3b      	ldr	r3, [r7, #32]
 8000560:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000564:	2b00      	cmp	r3, #0
 8000566:	d103      	bne.n	8000570 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000568:	f000 ff5e 	bl	8001428 <HAL_RCC_GetPCLK1Freq>
 800056c:	6378      	str	r0, [r7, #52]	@ 0x34
 800056e:	e004      	b.n	800057a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000570:	f000 ff5a 	bl	8001428 <HAL_RCC_GetPCLK1Freq>
 8000574:	4603      	mov	r3, r0
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800057a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800057c:	4a23      	ldr	r2, [pc, #140]	@ (800060c <HAL_InitTick+0xec>)
 800057e:	fba2 2303 	umull	r2, r3, r2, r3
 8000582:	0c9b      	lsrs	r3, r3, #18
 8000584:	3b01      	subs	r3, #1
 8000586:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000588:	4b21      	ldr	r3, [pc, #132]	@ (8000610 <HAL_InitTick+0xf0>)
 800058a:	4a22      	ldr	r2, [pc, #136]	@ (8000614 <HAL_InitTick+0xf4>)
 800058c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800058e:	4b20      	ldr	r3, [pc, #128]	@ (8000610 <HAL_InitTick+0xf0>)
 8000590:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000594:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000596:	4a1e      	ldr	r2, [pc, #120]	@ (8000610 <HAL_InitTick+0xf0>)
 8000598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800059a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800059c:	4b1c      	ldr	r3, [pc, #112]	@ (8000610 <HAL_InitTick+0xf0>)
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000610 <HAL_InitTick+0xf0>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005a8:	4b19      	ldr	r3, [pc, #100]	@ (8000610 <HAL_InitTick+0xf0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80005ae:	4818      	ldr	r0, [pc, #96]	@ (8000610 <HAL_InitTick+0xf0>)
 80005b0:	f000 ff9c 	bl	80014ec <HAL_TIM_Base_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80005ba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d11b      	bne.n	80005fa <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80005c2:	4813      	ldr	r0, [pc, #76]	@ (8000610 <HAL_InitTick+0xf0>)
 80005c4:	f000 ffea 	bl	800159c <HAL_TIM_Base_Start_IT>
 80005c8:	4603      	mov	r3, r0
 80005ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80005ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d111      	bne.n	80005fa <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80005d6:	201e      	movs	r0, #30
 80005d8:	f000 f997 	bl	800090a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2b0f      	cmp	r3, #15
 80005e0:	d808      	bhi.n	80005f4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80005e2:	2200      	movs	r2, #0
 80005e4:	6879      	ldr	r1, [r7, #4]
 80005e6:	201e      	movs	r0, #30
 80005e8:	f000 f973 	bl	80008d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000618 <HAL_InitTick+0xf8>)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6013      	str	r3, [r2, #0]
 80005f2:	e002      	b.n	80005fa <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80005f4:	2301      	movs	r3, #1
 80005f6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80005fa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3738      	adds	r7, #56	@ 0x38
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40021000 	.word	0x40021000
 800060c:	431bde83 	.word	0x431bde83
 8000610:	20000338 	.word	0x20000338
 8000614:	40000800 	.word	0x40000800
 8000618:	20000008 	.word	0x20000008

0800061c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <NMI_Handler+0x4>

08000624 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <HardFault_Handler+0x4>

0800062c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <MemManage_Handler+0x4>

08000634 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <BusFault_Handler+0x4>

0800063c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <UsageFault_Handler+0x4>

08000644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000654:	4802      	ldr	r0, [pc, #8]	@ (8000660 <TIM4_IRQHandler+0x10>)
 8000656:	f000 fff3 	bl	8001640 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000338 	.word	0x20000338

08000664 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr

08000670 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000670:	f7ff fff8 	bl	8000664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000674:	480b      	ldr	r0, [pc, #44]	@ (80006a4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000676:	490c      	ldr	r1, [pc, #48]	@ (80006a8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000678:	4a0c      	ldr	r2, [pc, #48]	@ (80006ac <LoopFillZerobss+0x16>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800067c:	e002      	b.n	8000684 <LoopCopyDataInit>

0800067e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000682:	3304      	adds	r3, #4

08000684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000688:	d3f9      	bcc.n	800067e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068a:	4a09      	ldr	r2, [pc, #36]	@ (80006b0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800068c:	4c09      	ldr	r4, [pc, #36]	@ (80006b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000690:	e001      	b.n	8000696 <LoopFillZerobss>

08000692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000694:	3204      	adds	r2, #4

08000696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000698:	d3fb      	bcc.n	8000692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800069a:	f003 fd6d 	bl	8004178 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069e:	f7ff fd93 	bl	80001c8 <main>
  bx lr
 80006a2:	4770      	bx	lr
  ldr r0, =_sdata
 80006a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80006ac:	08004384 	.word	0x08004384
  ldr r2, =_sbss
 80006b0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80006b4:	20001210 	.word	0x20001210

080006b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b8:	e7fe      	b.n	80006b8 <ADC1_2_IRQHandler>
	...

080006bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c0:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <HAL_Init+0x28>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a07      	ldr	r2, [pc, #28]	@ (80006e4 <HAL_Init+0x28>)
 80006c6:	f043 0310 	orr.w	r3, r3, #16
 80006ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f8f5 	bl	80008bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006d2:	200f      	movs	r0, #15
 80006d4:	f7ff ff24 	bl	8000520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006d8:	f7ff feea 	bl	80004b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006dc:	2300      	movs	r3, #0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40022000 	.word	0x40022000

080006e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006ec:	4b05      	ldr	r3, [pc, #20]	@ (8000704 <HAL_IncTick+0x1c>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <HAL_IncTick+0x20>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4413      	add	r3, r2
 80006f8:	4a03      	ldr	r2, [pc, #12]	@ (8000708 <HAL_IncTick+0x20>)
 80006fa:	6013      	str	r3, [r2, #0]
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	2000000c 	.word	0x2000000c
 8000708:	20000380 	.word	0x20000380

0800070c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return uwTick;
 8000710:	4b02      	ldr	r3, [pc, #8]	@ (800071c <HAL_GetTick+0x10>)
 8000712:	681b      	ldr	r3, [r3, #0]
}
 8000714:	4618      	mov	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	20000380 	.word	0x20000380

08000720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000728:	f7ff fff0 	bl	800070c <HAL_GetTick>
 800072c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000738:	d005      	beq.n	8000746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800073a:	4b0a      	ldr	r3, [pc, #40]	@ (8000764 <HAL_Delay+0x44>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	461a      	mov	r2, r3
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	4413      	add	r3, r2
 8000744:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000746:	bf00      	nop
 8000748:	f7ff ffe0 	bl	800070c <HAL_GetTick>
 800074c:	4602      	mov	r2, r0
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	68fa      	ldr	r2, [r7, #12]
 8000754:	429a      	cmp	r2, r3
 8000756:	d8f7      	bhi.n	8000748 <HAL_Delay+0x28>
  {
  }
}
 8000758:	bf00      	nop
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	2000000c 	.word	0x2000000c

08000768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f003 0307 	and.w	r3, r3, #7
 8000776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <__NVIC_SetPriorityGrouping+0x44>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800077e:	68ba      	ldr	r2, [r7, #8]
 8000780:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000784:	4013      	ands	r3, r2
 8000786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000790:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000794:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800079a:	4a04      	ldr	r2, [pc, #16]	@ (80007ac <__NVIC_SetPriorityGrouping+0x44>)
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	60d3      	str	r3, [r2, #12]
}
 80007a0:	bf00      	nop
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b4:	4b04      	ldr	r3, [pc, #16]	@ (80007c8 <__NVIC_GetPriorityGrouping+0x18>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	0a1b      	lsrs	r3, r3, #8
 80007ba:	f003 0307 	and.w	r3, r3, #7
}
 80007be:	4618      	mov	r0, r3
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	db0b      	blt.n	80007f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	f003 021f 	and.w	r2, r3, #31
 80007e4:	4906      	ldr	r1, [pc, #24]	@ (8000800 <__NVIC_EnableIRQ+0x34>)
 80007e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ea:	095b      	lsrs	r3, r3, #5
 80007ec:	2001      	movs	r0, #1
 80007ee:	fa00 f202 	lsl.w	r2, r0, r2
 80007f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr
 8000800:	e000e100 	.word	0xe000e100

08000804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	6039      	str	r1, [r7, #0]
 800080e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000814:	2b00      	cmp	r3, #0
 8000816:	db0a      	blt.n	800082e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	b2da      	uxtb	r2, r3
 800081c:	490c      	ldr	r1, [pc, #48]	@ (8000850 <__NVIC_SetPriority+0x4c>)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	0112      	lsls	r2, r2, #4
 8000824:	b2d2      	uxtb	r2, r2
 8000826:	440b      	add	r3, r1
 8000828:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800082c:	e00a      	b.n	8000844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4908      	ldr	r1, [pc, #32]	@ (8000854 <__NVIC_SetPriority+0x50>)
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	f003 030f 	and.w	r3, r3, #15
 800083a:	3b04      	subs	r3, #4
 800083c:	0112      	lsls	r2, r2, #4
 800083e:	b2d2      	uxtb	r2, r2
 8000840:	440b      	add	r3, r1
 8000842:	761a      	strb	r2, [r3, #24]
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000e100 	.word	0xe000e100
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000858:	b480      	push	{r7}
 800085a:	b089      	sub	sp, #36	@ 0x24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	f1c3 0307 	rsb	r3, r3, #7
 8000872:	2b04      	cmp	r3, #4
 8000874:	bf28      	it	cs
 8000876:	2304      	movcs	r3, #4
 8000878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	3304      	adds	r3, #4
 800087e:	2b06      	cmp	r3, #6
 8000880:	d902      	bls.n	8000888 <NVIC_EncodePriority+0x30>
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	3b03      	subs	r3, #3
 8000886:	e000      	b.n	800088a <NVIC_EncodePriority+0x32>
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800088c:	f04f 32ff 	mov.w	r2, #4294967295
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	43da      	mvns	r2, r3
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	401a      	ands	r2, r3
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a0:	f04f 31ff 	mov.w	r1, #4294967295
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	fa01 f303 	lsl.w	r3, r1, r3
 80008aa:	43d9      	mvns	r1, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b0:	4313      	orrs	r3, r2
         );
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3724      	adds	r7, #36	@ 0x24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr

080008bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff ff4f 	bl	8000768 <__NVIC_SetPriorityGrouping>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b086      	sub	sp, #24
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	4603      	mov	r3, r0
 80008da:	60b9      	str	r1, [r7, #8]
 80008dc:	607a      	str	r2, [r7, #4]
 80008de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008e4:	f7ff ff64 	bl	80007b0 <__NVIC_GetPriorityGrouping>
 80008e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	68b9      	ldr	r1, [r7, #8]
 80008ee:	6978      	ldr	r0, [r7, #20]
 80008f0:	f7ff ffb2 	bl	8000858 <NVIC_EncodePriority>
 80008f4:	4602      	mov	r2, r0
 80008f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008fa:	4611      	mov	r1, r2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff ff81 	bl	8000804 <__NVIC_SetPriority>
}
 8000902:	bf00      	nop
 8000904:	3718      	adds	r7, #24
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b082      	sub	sp, #8
 800090e:	af00      	add	r7, sp, #0
 8000910:	4603      	mov	r3, r0
 8000912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ff57 	bl	80007cc <__NVIC_EnableIRQ>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000928:	b480      	push	{r7}
 800092a:	b08b      	sub	sp, #44	@ 0x2c
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800093a:	e169      	b.n	8000c10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800093c:	2201      	movs	r2, #1
 800093e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	69fa      	ldr	r2, [r7, #28]
 800094c:	4013      	ands	r3, r2
 800094e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	429a      	cmp	r2, r3
 8000956:	f040 8158 	bne.w	8000c0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	4a9a      	ldr	r2, [pc, #616]	@ (8000bc8 <HAL_GPIO_Init+0x2a0>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d05e      	beq.n	8000a22 <HAL_GPIO_Init+0xfa>
 8000964:	4a98      	ldr	r2, [pc, #608]	@ (8000bc8 <HAL_GPIO_Init+0x2a0>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d875      	bhi.n	8000a56 <HAL_GPIO_Init+0x12e>
 800096a:	4a98      	ldr	r2, [pc, #608]	@ (8000bcc <HAL_GPIO_Init+0x2a4>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d058      	beq.n	8000a22 <HAL_GPIO_Init+0xfa>
 8000970:	4a96      	ldr	r2, [pc, #600]	@ (8000bcc <HAL_GPIO_Init+0x2a4>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d86f      	bhi.n	8000a56 <HAL_GPIO_Init+0x12e>
 8000976:	4a96      	ldr	r2, [pc, #600]	@ (8000bd0 <HAL_GPIO_Init+0x2a8>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d052      	beq.n	8000a22 <HAL_GPIO_Init+0xfa>
 800097c:	4a94      	ldr	r2, [pc, #592]	@ (8000bd0 <HAL_GPIO_Init+0x2a8>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d869      	bhi.n	8000a56 <HAL_GPIO_Init+0x12e>
 8000982:	4a94      	ldr	r2, [pc, #592]	@ (8000bd4 <HAL_GPIO_Init+0x2ac>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d04c      	beq.n	8000a22 <HAL_GPIO_Init+0xfa>
 8000988:	4a92      	ldr	r2, [pc, #584]	@ (8000bd4 <HAL_GPIO_Init+0x2ac>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d863      	bhi.n	8000a56 <HAL_GPIO_Init+0x12e>
 800098e:	4a92      	ldr	r2, [pc, #584]	@ (8000bd8 <HAL_GPIO_Init+0x2b0>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d046      	beq.n	8000a22 <HAL_GPIO_Init+0xfa>
 8000994:	4a90      	ldr	r2, [pc, #576]	@ (8000bd8 <HAL_GPIO_Init+0x2b0>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d85d      	bhi.n	8000a56 <HAL_GPIO_Init+0x12e>
 800099a:	2b12      	cmp	r3, #18
 800099c:	d82a      	bhi.n	80009f4 <HAL_GPIO_Init+0xcc>
 800099e:	2b12      	cmp	r3, #18
 80009a0:	d859      	bhi.n	8000a56 <HAL_GPIO_Init+0x12e>
 80009a2:	a201      	add	r2, pc, #4	@ (adr r2, 80009a8 <HAL_GPIO_Init+0x80>)
 80009a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a8:	08000a23 	.word	0x08000a23
 80009ac:	080009fd 	.word	0x080009fd
 80009b0:	08000a0f 	.word	0x08000a0f
 80009b4:	08000a51 	.word	0x08000a51
 80009b8:	08000a57 	.word	0x08000a57
 80009bc:	08000a57 	.word	0x08000a57
 80009c0:	08000a57 	.word	0x08000a57
 80009c4:	08000a57 	.word	0x08000a57
 80009c8:	08000a57 	.word	0x08000a57
 80009cc:	08000a57 	.word	0x08000a57
 80009d0:	08000a57 	.word	0x08000a57
 80009d4:	08000a57 	.word	0x08000a57
 80009d8:	08000a57 	.word	0x08000a57
 80009dc:	08000a57 	.word	0x08000a57
 80009e0:	08000a57 	.word	0x08000a57
 80009e4:	08000a57 	.word	0x08000a57
 80009e8:	08000a57 	.word	0x08000a57
 80009ec:	08000a05 	.word	0x08000a05
 80009f0:	08000a19 	.word	0x08000a19
 80009f4:	4a79      	ldr	r2, [pc, #484]	@ (8000bdc <HAL_GPIO_Init+0x2b4>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d013      	beq.n	8000a22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009fa:	e02c      	b.n	8000a56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	623b      	str	r3, [r7, #32]
          break;
 8000a02:	e029      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	623b      	str	r3, [r7, #32]
          break;
 8000a0c:	e024      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	3308      	adds	r3, #8
 8000a14:	623b      	str	r3, [r7, #32]
          break;
 8000a16:	e01f      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	330c      	adds	r3, #12
 8000a1e:	623b      	str	r3, [r7, #32]
          break;
 8000a20:	e01a      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d102      	bne.n	8000a30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	623b      	str	r3, [r7, #32]
          break;
 8000a2e:	e013      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d105      	bne.n	8000a44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a38:	2308      	movs	r3, #8
 8000a3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	69fa      	ldr	r2, [r7, #28]
 8000a40:	611a      	str	r2, [r3, #16]
          break;
 8000a42:	e009      	b.n	8000a58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a44:	2308      	movs	r3, #8
 8000a46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	69fa      	ldr	r2, [r7, #28]
 8000a4c:	615a      	str	r2, [r3, #20]
          break;
 8000a4e:	e003      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
          break;
 8000a54:	e000      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          break;
 8000a56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	2bff      	cmp	r3, #255	@ 0xff
 8000a5c:	d801      	bhi.n	8000a62 <HAL_GPIO_Init+0x13a>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	e001      	b.n	8000a66 <HAL_GPIO_Init+0x13e>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3304      	adds	r3, #4
 8000a66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	2bff      	cmp	r3, #255	@ 0xff
 8000a6c:	d802      	bhi.n	8000a74 <HAL_GPIO_Init+0x14c>
 8000a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	e002      	b.n	8000a7a <HAL_GPIO_Init+0x152>
 8000a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a76:	3b08      	subs	r3, #8
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	210f      	movs	r1, #15
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	fa01 f303 	lsl.w	r3, r1, r3
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	6a39      	ldr	r1, [r7, #32]
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	fa01 f303 	lsl.w	r3, r1, r3
 8000a94:	431a      	orrs	r2, r3
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f000 80b1 	beq.w	8000c0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000aa8:	4b4d      	ldr	r3, [pc, #308]	@ (8000be0 <HAL_GPIO_Init+0x2b8>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a4c      	ldr	r2, [pc, #304]	@ (8000be0 <HAL_GPIO_Init+0x2b8>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b4a      	ldr	r3, [pc, #296]	@ (8000be0 <HAL_GPIO_Init+0x2b8>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ac0:	4a48      	ldr	r2, [pc, #288]	@ (8000be4 <HAL_GPIO_Init+0x2bc>)
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac4:	089b      	lsrs	r3, r3, #2
 8000ac6:	3302      	adds	r3, #2
 8000ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000acc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad0:	f003 0303 	and.w	r3, r3, #3
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	220f      	movs	r2, #15
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a40      	ldr	r2, [pc, #256]	@ (8000be8 <HAL_GPIO_Init+0x2c0>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d013      	beq.n	8000b14 <HAL_GPIO_Init+0x1ec>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a3f      	ldr	r2, [pc, #252]	@ (8000bec <HAL_GPIO_Init+0x2c4>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d00d      	beq.n	8000b10 <HAL_GPIO_Init+0x1e8>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a3e      	ldr	r2, [pc, #248]	@ (8000bf0 <HAL_GPIO_Init+0x2c8>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d007      	beq.n	8000b0c <HAL_GPIO_Init+0x1e4>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a3d      	ldr	r2, [pc, #244]	@ (8000bf4 <HAL_GPIO_Init+0x2cc>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d101      	bne.n	8000b08 <HAL_GPIO_Init+0x1e0>
 8000b04:	2303      	movs	r3, #3
 8000b06:	e006      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b08:	2304      	movs	r3, #4
 8000b0a:	e004      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	e002      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b10:	2301      	movs	r3, #1
 8000b12:	e000      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b14:	2300      	movs	r3, #0
 8000b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b18:	f002 0203 	and.w	r2, r2, #3
 8000b1c:	0092      	lsls	r2, r2, #2
 8000b1e:	4093      	lsls	r3, r2
 8000b20:	68fa      	ldr	r2, [r7, #12]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b26:	492f      	ldr	r1, [pc, #188]	@ (8000be4 <HAL_GPIO_Init+0x2bc>)
 8000b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2a:	089b      	lsrs	r3, r3, #2
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d006      	beq.n	8000b4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b40:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b42:	689a      	ldr	r2, [r3, #8]
 8000b44:	492c      	ldr	r1, [pc, #176]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	608b      	str	r3, [r1, #8]
 8000b4c:	e006      	b.n	8000b5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b50:	689a      	ldr	r2, [r3, #8]
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	43db      	mvns	r3, r3
 8000b56:	4928      	ldr	r1, [pc, #160]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d006      	beq.n	8000b76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b68:	4b23      	ldr	r3, [pc, #140]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b6a:	68da      	ldr	r2, [r3, #12]
 8000b6c:	4922      	ldr	r1, [pc, #136]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	60cb      	str	r3, [r1, #12]
 8000b74:	e006      	b.n	8000b84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b76:	4b20      	ldr	r3, [pc, #128]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b78:	68da      	ldr	r2, [r3, #12]
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	491e      	ldr	r1, [pc, #120]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b80:	4013      	ands	r3, r2
 8000b82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d006      	beq.n	8000b9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b90:	4b19      	ldr	r3, [pc, #100]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b92:	685a      	ldr	r2, [r3, #4]
 8000b94:	4918      	ldr	r1, [pc, #96]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	604b      	str	r3, [r1, #4]
 8000b9c:	e006      	b.n	8000bac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b9e:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	4914      	ldr	r1, [pc, #80]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000ba8:	4013      	ands	r3, r2
 8000baa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d021      	beq.n	8000bfc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	490e      	ldr	r1, [pc, #56]	@ (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	600b      	str	r3, [r1, #0]
 8000bc4:	e021      	b.n	8000c0a <HAL_GPIO_Init+0x2e2>
 8000bc6:	bf00      	nop
 8000bc8:	10320000 	.word	0x10320000
 8000bcc:	10310000 	.word	0x10310000
 8000bd0:	10220000 	.word	0x10220000
 8000bd4:	10210000 	.word	0x10210000
 8000bd8:	10120000 	.word	0x10120000
 8000bdc:	10110000 	.word	0x10110000
 8000be0:	40021000 	.word	0x40021000
 8000be4:	40010000 	.word	0x40010000
 8000be8:	40010800 	.word	0x40010800
 8000bec:	40010c00 	.word	0x40010c00
 8000bf0:	40011000 	.word	0x40011000
 8000bf4:	40011400 	.word	0x40011400
 8000bf8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <HAL_GPIO_Init+0x304>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	43db      	mvns	r3, r3
 8000c04:	4909      	ldr	r1, [pc, #36]	@ (8000c2c <HAL_GPIO_Init+0x304>)
 8000c06:	4013      	ands	r3, r2
 8000c08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c16:	fa22 f303 	lsr.w	r3, r2, r3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f47f ae8e 	bne.w	800093c <HAL_GPIO_Init+0x14>
  }
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	372c      	adds	r7, #44	@ 0x2c
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	40010400 	.word	0x40010400

08000c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	807b      	strh	r3, [r7, #2]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c40:	787b      	ldrb	r3, [r7, #1]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d003      	beq.n	8000c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c46:	887a      	ldrh	r2, [r7, #2]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c4c:	e003      	b.n	8000c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c4e:	887b      	ldrh	r3, [r7, #2]
 8000c50:	041a      	lsls	r2, r3, #16
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	611a      	str	r2, [r3, #16]
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c72:	887a      	ldrh	r2, [r7, #2]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4013      	ands	r3, r2
 8000c78:	041a      	lsls	r2, r3, #16
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	43d9      	mvns	r1, r3
 8000c7e:	887b      	ldrh	r3, [r7, #2]
 8000c80:	400b      	ands	r3, r1
 8000c82:	431a      	orrs	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	611a      	str	r2, [r3, #16]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
	...

08000c94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d101      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e272      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f000 8087 	beq.w	8000dc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cb4:	4b92      	ldr	r3, [pc, #584]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 030c 	and.w	r3, r3, #12
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	d00c      	beq.n	8000cda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cc0:	4b8f      	ldr	r3, [pc, #572]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 030c 	and.w	r3, r3, #12
 8000cc8:	2b08      	cmp	r3, #8
 8000cca:	d112      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x5e>
 8000ccc:	4b8c      	ldr	r3, [pc, #560]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cd8:	d10b      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cda:	4b89      	ldr	r3, [pc, #548]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d06c      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x12c>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d168      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e24c      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cfa:	d106      	bne.n	8000d0a <HAL_RCC_OscConfig+0x76>
 8000cfc:	4b80      	ldr	r3, [pc, #512]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a7f      	ldr	r2, [pc, #508]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	e02e      	b.n	8000d68 <HAL_RCC_OscConfig+0xd4>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10c      	bne.n	8000d2c <HAL_RCC_OscConfig+0x98>
 8000d12:	4b7b      	ldr	r3, [pc, #492]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a7a      	ldr	r2, [pc, #488]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	4b78      	ldr	r3, [pc, #480]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a77      	ldr	r2, [pc, #476]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	e01d      	b.n	8000d68 <HAL_RCC_OscConfig+0xd4>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d34:	d10c      	bne.n	8000d50 <HAL_RCC_OscConfig+0xbc>
 8000d36:	4b72      	ldr	r3, [pc, #456]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a71      	ldr	r2, [pc, #452]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	4b6f      	ldr	r3, [pc, #444]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a6e      	ldr	r2, [pc, #440]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	e00b      	b.n	8000d68 <HAL_RCC_OscConfig+0xd4>
 8000d50:	4b6b      	ldr	r3, [pc, #428]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a6a      	ldr	r2, [pc, #424]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	4b68      	ldr	r3, [pc, #416]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a67      	ldr	r2, [pc, #412]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d013      	beq.n	8000d98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d70:	f7ff fccc 	bl	800070c <HAL_GetTick>
 8000d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d76:	e008      	b.n	8000d8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d78:	f7ff fcc8 	bl	800070c <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b64      	cmp	r3, #100	@ 0x64
 8000d84:	d901      	bls.n	8000d8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e200      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d8a:	4b5d      	ldr	r3, [pc, #372]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d0f0      	beq.n	8000d78 <HAL_RCC_OscConfig+0xe4>
 8000d96:	e014      	b.n	8000dc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d98:	f7ff fcb8 	bl	800070c <HAL_GetTick>
 8000d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d9e:	e008      	b.n	8000db2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000da0:	f7ff fcb4 	bl	800070c <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b64      	cmp	r3, #100	@ 0x64
 8000dac:	d901      	bls.n	8000db2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dae:	2303      	movs	r3, #3
 8000db0:	e1ec      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000db2:	4b53      	ldr	r3, [pc, #332]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f0      	bne.n	8000da0 <HAL_RCC_OscConfig+0x10c>
 8000dbe:	e000      	b.n	8000dc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d063      	beq.n	8000e96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dce:	4b4c      	ldr	r3, [pc, #304]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 030c 	and.w	r3, r3, #12
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00b      	beq.n	8000df2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dda:	4b49      	ldr	r3, [pc, #292]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 030c 	and.w	r3, r3, #12
 8000de2:	2b08      	cmp	r3, #8
 8000de4:	d11c      	bne.n	8000e20 <HAL_RCC_OscConfig+0x18c>
 8000de6:	4b46      	ldr	r3, [pc, #280]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d116      	bne.n	8000e20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000df2:	4b43      	ldr	r3, [pc, #268]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d005      	beq.n	8000e0a <HAL_RCC_OscConfig+0x176>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	691b      	ldr	r3, [r3, #16]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d001      	beq.n	8000e0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e1c0      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e0a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	4939      	ldr	r1, [pc, #228]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e1e:	e03a      	b.n	8000e96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	691b      	ldr	r3, [r3, #16]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d020      	beq.n	8000e6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e28:	4b36      	ldr	r3, [pc, #216]	@ (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2e:	f7ff fc6d 	bl	800070c <HAL_GetTick>
 8000e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e34:	e008      	b.n	8000e48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e36:	f7ff fc69 	bl	800070c <HAL_GetTick>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d901      	bls.n	8000e48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e44:	2303      	movs	r3, #3
 8000e46:	e1a1      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e48:	4b2d      	ldr	r3, [pc, #180]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0302 	and.w	r3, r3, #2
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d0f0      	beq.n	8000e36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e54:	4b2a      	ldr	r3, [pc, #168]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	4927      	ldr	r1, [pc, #156]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	4313      	orrs	r3, r2
 8000e66:	600b      	str	r3, [r1, #0]
 8000e68:	e015      	b.n	8000e96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e6a:	4b26      	ldr	r3, [pc, #152]	@ (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e70:	f7ff fc4c 	bl	800070c <HAL_GetTick>
 8000e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e76:	e008      	b.n	8000e8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e78:	f7ff fc48 	bl	800070c <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d901      	bls.n	8000e8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e180      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1f0      	bne.n	8000e78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d03a      	beq.n	8000f18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d019      	beq.n	8000ede <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eaa:	4b17      	ldr	r3, [pc, #92]	@ (8000f08 <HAL_RCC_OscConfig+0x274>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb0:	f7ff fc2c 	bl	800070c <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eb6:	e008      	b.n	8000eca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eb8:	f7ff fc28 	bl	800070c <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e160      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eca:	4b0d      	ldr	r3, [pc, #52]	@ (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d0f0      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f000 faea 	bl	80014b0 <RCC_Delay>
 8000edc:	e01c      	b.n	8000f18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ede:	4b0a      	ldr	r3, [pc, #40]	@ (8000f08 <HAL_RCC_OscConfig+0x274>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee4:	f7ff fc12 	bl	800070c <HAL_GetTick>
 8000ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eea:	e00f      	b.n	8000f0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eec:	f7ff fc0e 	bl	800070c <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d908      	bls.n	8000f0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e146      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000
 8000f04:	42420000 	.word	0x42420000
 8000f08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f0c:	4b92      	ldr	r3, [pc, #584]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1e9      	bne.n	8000eec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f000 80a6 	beq.w	8001072 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f2a:	4b8b      	ldr	r3, [pc, #556]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d10d      	bne.n	8000f52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f36:	4b88      	ldr	r3, [pc, #544]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	4a87      	ldr	r2, [pc, #540]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f40:	61d3      	str	r3, [r2, #28]
 8000f42:	4b85      	ldr	r3, [pc, #532]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f52:	4b82      	ldr	r3, [pc, #520]	@ (800115c <HAL_RCC_OscConfig+0x4c8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d118      	bne.n	8000f90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f5e:	4b7f      	ldr	r3, [pc, #508]	@ (800115c <HAL_RCC_OscConfig+0x4c8>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a7e      	ldr	r2, [pc, #504]	@ (800115c <HAL_RCC_OscConfig+0x4c8>)
 8000f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f6a:	f7ff fbcf 	bl	800070c <HAL_GetTick>
 8000f6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f70:	e008      	b.n	8000f84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f72:	f7ff fbcb 	bl	800070c <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b64      	cmp	r3, #100	@ 0x64
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e103      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f84:	4b75      	ldr	r3, [pc, #468]	@ (800115c <HAL_RCC_OscConfig+0x4c8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d0f0      	beq.n	8000f72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d106      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x312>
 8000f98:	4b6f      	ldr	r3, [pc, #444]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
 8000f9c:	4a6e      	ldr	r2, [pc, #440]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6213      	str	r3, [r2, #32]
 8000fa4:	e02d      	b.n	8001002 <HAL_RCC_OscConfig+0x36e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10c      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x334>
 8000fae:	4b6a      	ldr	r3, [pc, #424]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fb0:	6a1b      	ldr	r3, [r3, #32]
 8000fb2:	4a69      	ldr	r2, [pc, #420]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fb4:	f023 0301 	bic.w	r3, r3, #1
 8000fb8:	6213      	str	r3, [r2, #32]
 8000fba:	4b67      	ldr	r3, [pc, #412]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fbc:	6a1b      	ldr	r3, [r3, #32]
 8000fbe:	4a66      	ldr	r2, [pc, #408]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fc0:	f023 0304 	bic.w	r3, r3, #4
 8000fc4:	6213      	str	r3, [r2, #32]
 8000fc6:	e01c      	b.n	8001002 <HAL_RCC_OscConfig+0x36e>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	2b05      	cmp	r3, #5
 8000fce:	d10c      	bne.n	8000fea <HAL_RCC_OscConfig+0x356>
 8000fd0:	4b61      	ldr	r3, [pc, #388]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
 8000fd4:	4a60      	ldr	r2, [pc, #384]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fd6:	f043 0304 	orr.w	r3, r3, #4
 8000fda:	6213      	str	r3, [r2, #32]
 8000fdc:	4b5e      	ldr	r3, [pc, #376]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fde:	6a1b      	ldr	r3, [r3, #32]
 8000fe0:	4a5d      	ldr	r2, [pc, #372]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	6213      	str	r3, [r2, #32]
 8000fe8:	e00b      	b.n	8001002 <HAL_RCC_OscConfig+0x36e>
 8000fea:	4b5b      	ldr	r3, [pc, #364]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	6a1b      	ldr	r3, [r3, #32]
 8000fee:	4a5a      	ldr	r2, [pc, #360]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	f023 0301 	bic.w	r3, r3, #1
 8000ff4:	6213      	str	r3, [r2, #32]
 8000ff6:	4b58      	ldr	r3, [pc, #352]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
 8000ffa:	4a57      	ldr	r2, [pc, #348]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	f023 0304 	bic.w	r3, r3, #4
 8001000:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d015      	beq.n	8001036 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100a:	f7ff fb7f 	bl	800070c <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001010:	e00a      	b.n	8001028 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001012:	f7ff fb7b 	bl	800070c <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001020:	4293      	cmp	r3, r2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e0b1      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001028:	4b4b      	ldr	r3, [pc, #300]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0ee      	beq.n	8001012 <HAL_RCC_OscConfig+0x37e>
 8001034:	e014      	b.n	8001060 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001036:	f7ff fb69 	bl	800070c <HAL_GetTick>
 800103a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800103c:	e00a      	b.n	8001054 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800103e:	f7ff fb65 	bl	800070c <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	f241 3288 	movw	r2, #5000	@ 0x1388
 800104c:	4293      	cmp	r3, r2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e09b      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001054:	4b40      	ldr	r3, [pc, #256]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1ee      	bne.n	800103e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001060:	7dfb      	ldrb	r3, [r7, #23]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d105      	bne.n	8001072 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001066:	4b3c      	ldr	r3, [pc, #240]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	4a3b      	ldr	r2, [pc, #236]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 800106c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001070:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 8087 	beq.w	800118a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800107c:	4b36      	ldr	r3, [pc, #216]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 030c 	and.w	r3, r3, #12
 8001084:	2b08      	cmp	r3, #8
 8001086:	d061      	beq.n	800114c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69db      	ldr	r3, [r3, #28]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d146      	bne.n	800111e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001090:	4b33      	ldr	r3, [pc, #204]	@ (8001160 <HAL_RCC_OscConfig+0x4cc>)
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001096:	f7ff fb39 	bl	800070c <HAL_GetTick>
 800109a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800109c:	e008      	b.n	80010b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800109e:	f7ff fb35 	bl	800070c <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e06d      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010b0:	4b29      	ldr	r3, [pc, #164]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1f0      	bne.n	800109e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010c4:	d108      	bne.n	80010d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010c6:	4b24      	ldr	r3, [pc, #144]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	4921      	ldr	r1, [pc, #132]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a19      	ldr	r1, [r3, #32]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e8:	430b      	orrs	r3, r1
 80010ea:	491b      	ldr	r1, [pc, #108]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	4313      	orrs	r3, r2
 80010ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001160 <HAL_RCC_OscConfig+0x4cc>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f6:	f7ff fb09 	bl	800070c <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010fe:	f7ff fb05 	bl	800070c <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e03d      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001110:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0f0      	beq.n	80010fe <HAL_RCC_OscConfig+0x46a>
 800111c:	e035      	b.n	800118a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800111e:	4b10      	ldr	r3, [pc, #64]	@ (8001160 <HAL_RCC_OscConfig+0x4cc>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001124:	f7ff faf2 	bl	800070c <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800112c:	f7ff faee 	bl	800070c <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e026      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800113e:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f0      	bne.n	800112c <HAL_RCC_OscConfig+0x498>
 800114a:	e01e      	b.n	800118a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d107      	bne.n	8001164 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e019      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
 8001158:	40021000 	.word	0x40021000
 800115c:	40007000 	.word	0x40007000
 8001160:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001164:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <HAL_RCC_OscConfig+0x500>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	429a      	cmp	r2, r3
 8001176:	d106      	bne.n	8001186 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001182:	429a      	cmp	r2, r3
 8001184:	d001      	beq.n	800118a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40021000 	.word	0x40021000

08001198 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d101      	bne.n	80011ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e0d0      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d910      	bls.n	80011dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ba:	4b67      	ldr	r3, [pc, #412]	@ (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 0207 	bic.w	r2, r3, #7
 80011c2:	4965      	ldr	r1, [pc, #404]	@ (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ca:	4b63      	ldr	r3, [pc, #396]	@ (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d001      	beq.n	80011dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e0b8      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d020      	beq.n	800122a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011f4:	4b59      	ldr	r3, [pc, #356]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	4a58      	ldr	r2, [pc, #352]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 80011fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80011fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0308 	and.w	r3, r3, #8
 8001208:	2b00      	cmp	r3, #0
 800120a:	d005      	beq.n	8001218 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800120c:	4b53      	ldr	r3, [pc, #332]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	4a52      	ldr	r2, [pc, #328]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001212:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001216:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001218:	4b50      	ldr	r3, [pc, #320]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	494d      	ldr	r1, [pc, #308]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	4313      	orrs	r3, r2
 8001228:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d040      	beq.n	80012b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d107      	bne.n	800124e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123e:	4b47      	ldr	r3, [pc, #284]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d115      	bne.n	8001276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e07f      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b02      	cmp	r3, #2
 8001254:	d107      	bne.n	8001266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001256:	4b41      	ldr	r3, [pc, #260]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d109      	bne.n	8001276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e073      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001266:	4b3d      	ldr	r3, [pc, #244]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e06b      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001276:	4b39      	ldr	r3, [pc, #228]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f023 0203 	bic.w	r2, r3, #3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	4936      	ldr	r1, [pc, #216]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001284:	4313      	orrs	r3, r2
 8001286:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001288:	f7ff fa40 	bl	800070c <HAL_GetTick>
 800128c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800128e:	e00a      	b.n	80012a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001290:	f7ff fa3c 	bl	800070c <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800129e:	4293      	cmp	r3, r2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e053      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012a6:	4b2d      	ldr	r3, [pc, #180]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 020c 	and.w	r2, r3, #12
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d1eb      	bne.n	8001290 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012b8:	4b27      	ldr	r3, [pc, #156]	@ (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0307 	and.w	r3, r3, #7
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d210      	bcs.n	80012e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c6:	4b24      	ldr	r3, [pc, #144]	@ (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 0207 	bic.w	r2, r3, #7
 80012ce:	4922      	ldr	r1, [pc, #136]	@ (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012d6:	4b20      	ldr	r3, [pc, #128]	@ (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d001      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e032      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d008      	beq.n	8001306 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012f4:	4b19      	ldr	r3, [pc, #100]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	4916      	ldr	r1, [pc, #88]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001302:	4313      	orrs	r3, r2
 8001304:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	2b00      	cmp	r3, #0
 8001310:	d009      	beq.n	8001326 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001312:	4b12      	ldr	r3, [pc, #72]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	490e      	ldr	r1, [pc, #56]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001322:	4313      	orrs	r3, r2
 8001324:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001326:	f000 f821 	bl	800136c <HAL_RCC_GetSysClockFreq>
 800132a:	4602      	mov	r2, r0
 800132c:	4b0b      	ldr	r3, [pc, #44]	@ (800135c <HAL_RCC_ClockConfig+0x1c4>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	091b      	lsrs	r3, r3, #4
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	490a      	ldr	r1, [pc, #40]	@ (8001360 <HAL_RCC_ClockConfig+0x1c8>)
 8001338:	5ccb      	ldrb	r3, [r1, r3]
 800133a:	fa22 f303 	lsr.w	r3, r2, r3
 800133e:	4a09      	ldr	r2, [pc, #36]	@ (8001364 <HAL_RCC_ClockConfig+0x1cc>)
 8001340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <HAL_RCC_ClockConfig+0x1d0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f8ea 	bl	8000520 <HAL_InitTick>

  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40022000 	.word	0x40022000
 800135c:	40021000 	.word	0x40021000
 8001360:	08004350 	.word	0x08004350
 8001364:	20000004 	.word	0x20000004
 8001368:	20000008 	.word	0x20000008

0800136c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800136c:	b480      	push	{r7}
 800136e:	b087      	sub	sp, #28
 8001370:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001386:	4b1e      	ldr	r3, [pc, #120]	@ (8001400 <HAL_RCC_GetSysClockFreq+0x94>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b04      	cmp	r3, #4
 8001394:	d002      	beq.n	800139c <HAL_RCC_GetSysClockFreq+0x30>
 8001396:	2b08      	cmp	r3, #8
 8001398:	d003      	beq.n	80013a2 <HAL_RCC_GetSysClockFreq+0x36>
 800139a:	e027      	b.n	80013ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800139c:	4b19      	ldr	r3, [pc, #100]	@ (8001404 <HAL_RCC_GetSysClockFreq+0x98>)
 800139e:	613b      	str	r3, [r7, #16]
      break;
 80013a0:	e027      	b.n	80013f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	0c9b      	lsrs	r3, r3, #18
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	4a17      	ldr	r2, [pc, #92]	@ (8001408 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013ac:	5cd3      	ldrb	r3, [r2, r3]
 80013ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d010      	beq.n	80013dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013ba:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <HAL_RCC_GetSysClockFreq+0x94>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	0c5b      	lsrs	r3, r3, #17
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	4a11      	ldr	r2, [pc, #68]	@ (800140c <HAL_RCC_GetSysClockFreq+0xa0>)
 80013c6:	5cd3      	ldrb	r3, [r2, r3]
 80013c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001404 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ce:	fb03 f202 	mul.w	r2, r3, r2
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	e004      	b.n	80013e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a0c      	ldr	r2, [pc, #48]	@ (8001410 <HAL_RCC_GetSysClockFreq+0xa4>)
 80013e0:	fb02 f303 	mul.w	r3, r2, r3
 80013e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	613b      	str	r3, [r7, #16]
      break;
 80013ea:	e002      	b.n	80013f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013ec:	4b05      	ldr	r3, [pc, #20]	@ (8001404 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ee:	613b      	str	r3, [r7, #16]
      break;
 80013f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013f2:	693b      	ldr	r3, [r7, #16]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	371c      	adds	r7, #28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000
 8001404:	007a1200 	.word	0x007a1200
 8001408:	08004368 	.word	0x08004368
 800140c:	08004378 	.word	0x08004378
 8001410:	003d0900 	.word	0x003d0900

08001414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001418:	4b02      	ldr	r3, [pc, #8]	@ (8001424 <HAL_RCC_GetHCLKFreq+0x10>)
 800141a:	681b      	ldr	r3, [r3, #0]
}
 800141c:	4618      	mov	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800142c:	f7ff fff2 	bl	8001414 <HAL_RCC_GetHCLKFreq>
 8001430:	4602      	mov	r2, r0
 8001432:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	0a1b      	lsrs	r3, r3, #8
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	4903      	ldr	r1, [pc, #12]	@ (800144c <HAL_RCC_GetPCLK1Freq+0x24>)
 800143e:	5ccb      	ldrb	r3, [r1, r3]
 8001440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001444:	4618      	mov	r0, r3
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40021000 	.word	0x40021000
 800144c:	08004360 	.word	0x08004360

08001450 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	220f      	movs	r2, #15
 800145e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001460:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <HAL_RCC_GetClockConfig+0x58>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 0203 	and.w	r2, r3, #3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800146c:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <HAL_RCC_GetClockConfig+0x58>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001478:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <HAL_RCC_GetClockConfig+0x58>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001484:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <HAL_RCC_GetClockConfig+0x58>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	08db      	lsrs	r3, r3, #3
 800148a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001492:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <HAL_RCC_GetClockConfig+0x5c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0207 	and.w	r2, r3, #7
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40022000 	.word	0x40022000

080014b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014b8:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <RCC_Delay+0x34>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0a      	ldr	r2, [pc, #40]	@ (80014e8 <RCC_Delay+0x38>)
 80014be:	fba2 2303 	umull	r2, r3, r2, r3
 80014c2:	0a5b      	lsrs	r3, r3, #9
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	fb02 f303 	mul.w	r3, r2, r3
 80014ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014cc:	bf00      	nop
  }
  while (Delay --);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	1e5a      	subs	r2, r3, #1
 80014d2:	60fa      	str	r2, [r7, #12]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f9      	bne.n	80014cc <RCC_Delay+0x1c>
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	20000004 	.word	0x20000004
 80014e8:	10624dd3 	.word	0x10624dd3

080014ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e041      	b.n	8001582 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d106      	bne.n	8001518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 f839 	bl	800158a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2202      	movs	r2, #2
 800151c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3304      	adds	r3, #4
 8001528:	4619      	mov	r1, r3
 800152a:	4610      	mov	r0, r2
 800152c:	f000 f9b4 	bl	8001898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2201      	movs	r2, #1
 800153c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d001      	beq.n	80015b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e03a      	b.n	800162a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2202      	movs	r2, #2
 80015b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 0201 	orr.w	r2, r2, #1
 80015ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a18      	ldr	r2, [pc, #96]	@ (8001634 <HAL_TIM_Base_Start_IT+0x98>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d00e      	beq.n	80015f4 <HAL_TIM_Base_Start_IT+0x58>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015de:	d009      	beq.n	80015f4 <HAL_TIM_Base_Start_IT+0x58>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a14      	ldr	r2, [pc, #80]	@ (8001638 <HAL_TIM_Base_Start_IT+0x9c>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d004      	beq.n	80015f4 <HAL_TIM_Base_Start_IT+0x58>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a13      	ldr	r2, [pc, #76]	@ (800163c <HAL_TIM_Base_Start_IT+0xa0>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d111      	bne.n	8001618 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2b06      	cmp	r3, #6
 8001604:	d010      	beq.n	8001628 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f042 0201 	orr.w	r2, r2, #1
 8001614:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001616:	e007      	b.n	8001628 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 0201 	orr.w	r2, r2, #1
 8001626:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	40012c00 	.word	0x40012c00
 8001638:	40000400 	.word	0x40000400
 800163c:	40000800 	.word	0x40000800

08001640 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b02      	cmp	r3, #2
 8001654:	d122      	bne.n	800169c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b02      	cmp	r3, #2
 8001662:	d11b      	bne.n	800169c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f06f 0202 	mvn.w	r2, #2
 800166c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 f8ed 	bl	8001862 <HAL_TIM_IC_CaptureCallback>
 8001688:	e005      	b.n	8001696 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f8e0 	bl	8001850 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 f8ef 	bl	8001874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d122      	bne.n	80016f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d11b      	bne.n	80016f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f06f 0204 	mvn.w	r2, #4
 80016c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2202      	movs	r2, #2
 80016c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f8c3 	bl	8001862 <HAL_TIM_IC_CaptureCallback>
 80016dc:	e005      	b.n	80016ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f8b6 	bl	8001850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f8c5 	bl	8001874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b08      	cmp	r3, #8
 80016fc:	d122      	bne.n	8001744 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f003 0308 	and.w	r3, r3, #8
 8001708:	2b08      	cmp	r3, #8
 800170a:	d11b      	bne.n	8001744 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f06f 0208 	mvn.w	r2, #8
 8001714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2204      	movs	r2, #4
 800171a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f899 	bl	8001862 <HAL_TIM_IC_CaptureCallback>
 8001730:	e005      	b.n	800173e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f88c 	bl	8001850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 f89b 	bl	8001874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	f003 0310 	and.w	r3, r3, #16
 800174e:	2b10      	cmp	r3, #16
 8001750:	d122      	bne.n	8001798 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	f003 0310 	and.w	r3, r3, #16
 800175c:	2b10      	cmp	r3, #16
 800175e:	d11b      	bne.n	8001798 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f06f 0210 	mvn.w	r2, #16
 8001768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2208      	movs	r2, #8
 800176e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 f86f 	bl	8001862 <HAL_TIM_IC_CaptureCallback>
 8001784:	e005      	b.n	8001792 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f862 	bl	8001850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 f871 	bl	8001874 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d10e      	bne.n	80017c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d107      	bne.n	80017c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f06f 0201 	mvn.w	r2, #1
 80017bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7fe fe5e 	bl	8000480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ce:	2b80      	cmp	r3, #128	@ 0x80
 80017d0:	d10e      	bne.n	80017f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017dc:	2b80      	cmp	r3, #128	@ 0x80
 80017de:	d107      	bne.n	80017f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80017e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f8bf 	bl	800196e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017fa:	2b40      	cmp	r3, #64	@ 0x40
 80017fc:	d10e      	bne.n	800181c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001808:	2b40      	cmp	r3, #64	@ 0x40
 800180a:	d107      	bne.n	800181c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f835 	bl	8001886 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	f003 0320 	and.w	r3, r3, #32
 8001826:	2b20      	cmp	r3, #32
 8001828:	d10e      	bne.n	8001848 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	f003 0320 	and.w	r3, r3, #32
 8001834:	2b20      	cmp	r3, #32
 8001836:	d107      	bne.n	8001848 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f06f 0220 	mvn.w	r2, #32
 8001840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f88a 	bl	800195c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr

08001862 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a29      	ldr	r2, [pc, #164]	@ (8001950 <TIM_Base_SetConfig+0xb8>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d00b      	beq.n	80018c8 <TIM_Base_SetConfig+0x30>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018b6:	d007      	beq.n	80018c8 <TIM_Base_SetConfig+0x30>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a26      	ldr	r2, [pc, #152]	@ (8001954 <TIM_Base_SetConfig+0xbc>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d003      	beq.n	80018c8 <TIM_Base_SetConfig+0x30>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a25      	ldr	r2, [pc, #148]	@ (8001958 <TIM_Base_SetConfig+0xc0>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d108      	bne.n	80018da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001950 <TIM_Base_SetConfig+0xb8>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00b      	beq.n	80018fa <TIM_Base_SetConfig+0x62>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018e8:	d007      	beq.n	80018fa <TIM_Base_SetConfig+0x62>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a19      	ldr	r2, [pc, #100]	@ (8001954 <TIM_Base_SetConfig+0xbc>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d003      	beq.n	80018fa <TIM_Base_SetConfig+0x62>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a18      	ldr	r2, [pc, #96]	@ (8001958 <TIM_Base_SetConfig+0xc0>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d108      	bne.n	800190c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	4313      	orrs	r3, r2
 800190a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	4313      	orrs	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a07      	ldr	r2, [pc, #28]	@ (8001950 <TIM_Base_SetConfig+0xb8>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d103      	bne.n	8001940 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	691a      	ldr	r2, [r3, #16]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	615a      	str	r2, [r3, #20]
}
 8001946:	bf00      	nop
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	40012c00 	.word	0x40012c00
 8001954:	40000400 	.word	0x40000400
 8001958:	40000800 	.word	0x40000800

0800195c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr

0800196e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800198e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001992:	2b84      	cmp	r3, #132	@ 0x84
 8001994:	d005      	beq.n	80019a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001996:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4413      	add	r3, r2
 800199e:	3303      	adds	r3, #3
 80019a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80019a2:	68fb      	ldr	r3, [r7, #12]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr

080019ae <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019b4:	f3ef 8305 	mrs	r3, IPSR
 80019b8:	607b      	str	r3, [r7, #4]
  return(result);
 80019ba:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80019bc:	2b00      	cmp	r3, #0
 80019be:	bf14      	ite	ne
 80019c0:	2301      	movne	r3, #1
 80019c2:	2300      	moveq	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80019d4:	f001 f936 	bl	8002c44 <vTaskStartScheduler>
  
  return osOK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	bd80      	pop	{r7, pc}

080019de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80019de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019e0:	b089      	sub	sp, #36	@ 0x24
 80019e2:	af04      	add	r7, sp, #16
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d020      	beq.n	8001a32 <osThreadCreate+0x54>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d01c      	beq.n	8001a32 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685c      	ldr	r4, [r3, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691e      	ldr	r6, [r3, #16]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ffb8 	bl	8001980 <makeFreeRtosPriority>
 8001a10:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a1a:	9202      	str	r2, [sp, #8]
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	9100      	str	r1, [sp, #0]
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	4632      	mov	r2, r6
 8001a24:	4629      	mov	r1, r5
 8001a26:	4620      	mov	r0, r4
 8001a28:	f000 ff2f 	bl	800288a <xTaskCreateStatic>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	e01c      	b.n	8001a6c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685c      	ldr	r4, [r3, #4]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a3e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ff9a 	bl	8001980 <makeFreeRtosPriority>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	f107 030c 	add.w	r3, r7, #12
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	9200      	str	r2, [sp, #0]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	4632      	mov	r2, r6
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	f000 ff73 	bl	8002948 <xTaskCreate>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d001      	beq.n	8001a6c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	e000      	b.n	8001a6e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a76 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b084      	sub	sp, #16
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <osDelay+0x16>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	e000      	b.n	8001a8e <osDelay+0x18>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f001 f8a2 	bl	8002bd8 <vTaskDelay>
  
  return osOK;
 8001a94:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af02      	add	r7, sp, #8
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00f      	beq.n	8001ad0 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d10a      	bne.n	8001acc <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2203      	movs	r2, #3
 8001abc:	9200      	str	r2, [sp, #0]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f000 f9bc 	bl	8001e40 <xQueueGenericCreateStatic>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	e016      	b.n	8001afa <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	e014      	b.n	8001afa <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d110      	bne.n	8001af8 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2001      	movs	r0, #1
 8001adc:	f000 fa2c 	bl	8001f38 <xQueueGenericCreate>
 8001ae0:	60f8      	str	r0, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d005      	beq.n	8001af4 <osSemaphoreCreate+0x56>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	2200      	movs	r2, #0
 8001aec:	2100      	movs	r1, #0
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 fa80 	bl	8001ff4 <xQueueGenericSend>
      return sema;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	e000      	b.n	8001afa <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8001af8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8001b18:	2380      	movs	r3, #128	@ 0x80
 8001b1a:	e03a      	b.n	8001b92 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b26:	d103      	bne.n	8001b30 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8001b28:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	e009      	b.n	8001b44 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d006      	beq.n	8001b44 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <osSemaphoreWait+0x40>
      ticks = 1;
 8001b40:	2301      	movs	r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8001b44:	f7ff ff33 	bl	80019ae <inHandlerMode>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d017      	beq.n	8001b7e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001b4e:	f107 0308 	add.w	r3, r7, #8
 8001b52:	461a      	mov	r2, r3
 8001b54:	2100      	movs	r1, #0
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 fcee 	bl	8002538 <xQueueReceiveFromISR>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d001      	beq.n	8001b66 <osSemaphoreWait+0x62>
      return osErrorOS;
 8001b62:	23ff      	movs	r3, #255	@ 0xff
 8001b64:	e015      	b.n	8001b92 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d011      	beq.n	8001b90 <osSemaphoreWait+0x8c>
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <osSemaphoreWait+0x98>)
 8001b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	f3bf 8f4f 	dsb	sy
 8001b78:	f3bf 8f6f 	isb	sy
 8001b7c:	e008      	b.n	8001b90 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8001b7e:	68f9      	ldr	r1, [r7, #12]
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 fbc9 	bl	8002318 <xQueueSemaphoreTake>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d001      	beq.n	8001b90 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8001b8c:	23ff      	movs	r3, #255	@ 0xff
 8001b8e:	e000      	b.n	8001b92 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	e000ed04 	.word	0xe000ed04

08001ba0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8001bb0:	f7ff fefd 	bl	80019ae <inHandlerMode>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d016      	beq.n	8001be8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001bba:	f107 0308 	add.w	r3, r7, #8
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 fb19 	bl	80021f8 <xQueueGiveFromISR>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d001      	beq.n	8001bd0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8001bcc:	23ff      	movs	r3, #255	@ 0xff
 8001bce:	e017      	b.n	8001c00 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d013      	beq.n	8001bfe <osSemaphoreRelease+0x5e>
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c08 <osSemaphoreRelease+0x68>)
 8001bd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	f3bf 8f4f 	dsb	sy
 8001be2:	f3bf 8f6f 	isb	sy
 8001be6:	e00a      	b.n	8001bfe <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8001be8:	2300      	movs	r3, #0
 8001bea:	2200      	movs	r2, #0
 8001bec:	2100      	movs	r1, #0
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 fa00 	bl	8001ff4 <xQueueGenericSend>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d001      	beq.n	8001bfe <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8001bfa:	23ff      	movs	r3, #255	@ 0xff
 8001bfc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	e000ed04 	.word	0xe000ed04

08001c0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f103 0208 	add.w	r2, r3, #8
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295
 8001c24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f103 0208 	add.w	r2, r3, #8
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f103 0208 	add.w	r2, r3, #8
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr

08001c4a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr

08001c62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c62:	b480      	push	{r7}
 8001c64:	b085      	sub	sp, #20
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	1c5a      	adds	r2, r3, #1
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	601a      	str	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbe:	d103      	bne.n	8001cc8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	e00c      	b.n	8001ce2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3308      	adds	r3, #8
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	e002      	b.n	8001cd6 <vListInsert+0x2e>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d2f6      	bcs.n	8001cd0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	601a      	str	r2, [r3, #0]
}
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr

08001d18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6892      	ldr	r2, [r2, #8]
 8001d2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6852      	ldr	r2, [r2, #4]
 8001d38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d103      	bne.n	8001d4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	1e5a      	subs	r2, r3, #1
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
	...

08001d6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10b      	bne.n	8001d98 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d84:	f383 8811 	msr	BASEPRI, r3
 8001d88:	f3bf 8f6f 	isb	sy
 8001d8c:	f3bf 8f4f 	dsb	sy
 8001d90:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001d92:	bf00      	nop
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001d98:	f001 feb0 	bl	8003afc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001da4:	68f9      	ldr	r1, [r7, #12]
 8001da6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001da8:	fb01 f303 	mul.w	r3, r1, r3
 8001dac:	441a      	add	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	68f9      	ldr	r1, [r7, #12]
 8001dcc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001dce:	fb01 f303 	mul.w	r3, r1, r3
 8001dd2:	441a      	add	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	22ff      	movs	r2, #255	@ 0xff
 8001ddc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	22ff      	movs	r2, #255	@ 0xff
 8001de4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d114      	bne.n	8001e18 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d01a      	beq.n	8001e2c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	3310      	adds	r3, #16
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f001 f97e 	bl	80030fc <xTaskRemoveFromEventList>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d012      	beq.n	8001e2c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001e06:	4b0d      	ldr	r3, [pc, #52]	@ (8001e3c <xQueueGenericReset+0xd0>)
 8001e08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	f3bf 8f4f 	dsb	sy
 8001e12:	f3bf 8f6f 	isb	sy
 8001e16:	e009      	b.n	8001e2c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	3310      	adds	r3, #16
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fef5 	bl	8001c0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	3324      	adds	r3, #36	@ 0x24
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fef0 	bl	8001c0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001e2c:	f001 fe96 	bl	8003b5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001e30:	2301      	movs	r3, #1
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	e000ed04 	.word	0xe000ed04

08001e40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08e      	sub	sp, #56	@ 0x38
 8001e44:	af02      	add	r7, sp, #8
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10b      	bne.n	8001e6c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e58:	f383 8811 	msr	BASEPRI, r3
 8001e5c:	f3bf 8f6f 	isb	sy
 8001e60:	f3bf 8f4f 	dsb	sy
 8001e64:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001e66:	bf00      	nop
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10b      	bne.n	8001e8a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e76:	f383 8811 	msr	BASEPRI, r3
 8001e7a:	f3bf 8f6f 	isb	sy
 8001e7e:	f3bf 8f4f 	dsb	sy
 8001e82:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
 8001e88:	e7fd      	b.n	8001e86 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <xQueueGenericCreateStatic+0x56>
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <xQueueGenericCreateStatic+0x5a>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <xQueueGenericCreateStatic+0x5c>
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10b      	bne.n	8001eb8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ea4:	f383 8811 	msr	BASEPRI, r3
 8001ea8:	f3bf 8f6f 	isb	sy
 8001eac:	f3bf 8f4f 	dsb	sy
 8001eb0:	623b      	str	r3, [r7, #32]
}
 8001eb2:	bf00      	nop
 8001eb4:	bf00      	nop
 8001eb6:	e7fd      	b.n	8001eb4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d102      	bne.n	8001ec4 <xQueueGenericCreateStatic+0x84>
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <xQueueGenericCreateStatic+0x88>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <xQueueGenericCreateStatic+0x8a>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10b      	bne.n	8001ee6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ed2:	f383 8811 	msr	BASEPRI, r3
 8001ed6:	f3bf 8f6f 	isb	sy
 8001eda:	f3bf 8f4f 	dsb	sy
 8001ede:	61fb      	str	r3, [r7, #28]
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	e7fd      	b.n	8001ee2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001ee6:	2348      	movs	r3, #72	@ 0x48
 8001ee8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	2b48      	cmp	r3, #72	@ 0x48
 8001eee:	d00b      	beq.n	8001f08 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ef4:	f383 8811 	msr	BASEPRI, r3
 8001ef8:	f3bf 8f6f 	isb	sy
 8001efc:	f3bf 8f4f 	dsb	sy
 8001f00:	61bb      	str	r3, [r7, #24]
}
 8001f02:	bf00      	nop
 8001f04:	bf00      	nop
 8001f06:	e7fd      	b.n	8001f04 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00d      	beq.n	8001f2e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f1a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	4613      	mov	r3, r2
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	68b9      	ldr	r1, [r7, #8]
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 f844 	bl	8001fb6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3730      	adds	r7, #48	@ 0x30
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	@ 0x28
 8001f3c:	af02      	add	r7, sp, #8
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	4613      	mov	r3, r2
 8001f44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10b      	bne.n	8001f64 <xQueueGenericCreate+0x2c>
	__asm volatile
 8001f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f50:	f383 8811 	msr	BASEPRI, r3
 8001f54:	f3bf 8f6f 	isb	sy
 8001f58:	f3bf 8f4f 	dsb	sy
 8001f5c:	613b      	str	r3, [r7, #16]
}
 8001f5e:	bf00      	nop
 8001f60:	bf00      	nop
 8001f62:	e7fd      	b.n	8001f60 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d102      	bne.n	8001f70 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	e004      	b.n	8001f7a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	fb02 f303 	mul.w	r3, r2, r3
 8001f78:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3348      	adds	r3, #72	@ 0x48
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f001 febe 	bl	8003d00 <pvPortMalloc>
 8001f84:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00f      	beq.n	8001fac <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	3348      	adds	r3, #72	@ 0x48
 8001f90:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f9a:	79fa      	ldrb	r2, [r7, #7]
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 f805 	bl	8001fb6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001fac:	69bb      	ldr	r3, [r7, #24]
	}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3720      	adds	r7, #32
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d103      	bne.n	8001fd2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	e002      	b.n	8001fd8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	69b8      	ldr	r0, [r7, #24]
 8001fe8:	f7ff fec0 	bl	8001d6c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001fec:	bf00      	nop
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08e      	sub	sp, #56	@ 0x38
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
 8002000:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002002:	2300      	movs	r3, #0
 8002004:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800200a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10b      	bne.n	8002028 <xQueueGenericSend+0x34>
	__asm volatile
 8002010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002014:	f383 8811 	msr	BASEPRI, r3
 8002018:	f3bf 8f6f 	isb	sy
 800201c:	f3bf 8f4f 	dsb	sy
 8002020:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002022:	bf00      	nop
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d103      	bne.n	8002036 <xQueueGenericSend+0x42>
 800202e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <xQueueGenericSend+0x46>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <xQueueGenericSend+0x48>
 800203a:	2300      	movs	r3, #0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d10b      	bne.n	8002058 <xQueueGenericSend+0x64>
	__asm volatile
 8002040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002044:	f383 8811 	msr	BASEPRI, r3
 8002048:	f3bf 8f6f 	isb	sy
 800204c:	f3bf 8f4f 	dsb	sy
 8002050:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002052:	bf00      	nop
 8002054:	bf00      	nop
 8002056:	e7fd      	b.n	8002054 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d103      	bne.n	8002066 <xQueueGenericSend+0x72>
 800205e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002062:	2b01      	cmp	r3, #1
 8002064:	d101      	bne.n	800206a <xQueueGenericSend+0x76>
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <xQueueGenericSend+0x78>
 800206a:	2300      	movs	r3, #0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10b      	bne.n	8002088 <xQueueGenericSend+0x94>
	__asm volatile
 8002070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002074:	f383 8811 	msr	BASEPRI, r3
 8002078:	f3bf 8f6f 	isb	sy
 800207c:	f3bf 8f4f 	dsb	sy
 8002080:	623b      	str	r3, [r7, #32]
}
 8002082:	bf00      	nop
 8002084:	bf00      	nop
 8002086:	e7fd      	b.n	8002084 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002088:	f001 fa02 	bl	8003490 <xTaskGetSchedulerState>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d102      	bne.n	8002098 <xQueueGenericSend+0xa4>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <xQueueGenericSend+0xa8>
 8002098:	2301      	movs	r3, #1
 800209a:	e000      	b.n	800209e <xQueueGenericSend+0xaa>
 800209c:	2300      	movs	r3, #0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10b      	bne.n	80020ba <xQueueGenericSend+0xc6>
	__asm volatile
 80020a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020a6:	f383 8811 	msr	BASEPRI, r3
 80020aa:	f3bf 8f6f 	isb	sy
 80020ae:	f3bf 8f4f 	dsb	sy
 80020b2:	61fb      	str	r3, [r7, #28]
}
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
 80020b8:	e7fd      	b.n	80020b6 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80020ba:	f001 fd1f 	bl	8003afc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80020be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d302      	bcc.n	80020d0 <xQueueGenericSend+0xdc>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d129      	bne.n	8002124 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	68b9      	ldr	r1, [r7, #8]
 80020d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80020d6:	f000 fac8 	bl	800266a <prvCopyDataToQueue>
 80020da:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d010      	beq.n	8002106 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e6:	3324      	adds	r3, #36	@ 0x24
 80020e8:	4618      	mov	r0, r3
 80020ea:	f001 f807 	bl	80030fc <xTaskRemoveFromEventList>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d013      	beq.n	800211c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80020f4:	4b3f      	ldr	r3, [pc, #252]	@ (80021f4 <xQueueGenericSend+0x200>)
 80020f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	f3bf 8f4f 	dsb	sy
 8002100:	f3bf 8f6f 	isb	sy
 8002104:	e00a      	b.n	800211c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002108:	2b00      	cmp	r3, #0
 800210a:	d007      	beq.n	800211c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800210c:	4b39      	ldr	r3, [pc, #228]	@ (80021f4 <xQueueGenericSend+0x200>)
 800210e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	f3bf 8f4f 	dsb	sy
 8002118:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800211c:	f001 fd1e 	bl	8003b5c <vPortExitCritical>
				return pdPASS;
 8002120:	2301      	movs	r3, #1
 8002122:	e063      	b.n	80021ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d103      	bne.n	8002132 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800212a:	f001 fd17 	bl	8003b5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800212e:	2300      	movs	r3, #0
 8002130:	e05c      	b.n	80021ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002134:	2b00      	cmp	r3, #0
 8002136:	d106      	bne.n	8002146 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	4618      	mov	r0, r3
 800213e:	f001 f841 	bl	80031c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002142:	2301      	movs	r3, #1
 8002144:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002146:	f001 fd09 	bl	8003b5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800214a:	f000 fde5 	bl	8002d18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800214e:	f001 fcd5 	bl	8003afc <vPortEnterCritical>
 8002152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002154:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002158:	b25b      	sxtb	r3, r3
 800215a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215e:	d103      	bne.n	8002168 <xQueueGenericSend+0x174>
 8002160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800216a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800216e:	b25b      	sxtb	r3, r3
 8002170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002174:	d103      	bne.n	800217e <xQueueGenericSend+0x18a>
 8002176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800217e:	f001 fced 	bl	8003b5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002182:	1d3a      	adds	r2, r7, #4
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f001 f830 	bl	80031f0 <xTaskCheckForTimeOut>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d124      	bne.n	80021e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002196:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002198:	f000 fb5f 	bl	800285a <prvIsQueueFull>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d018      	beq.n	80021d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80021a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021a4:	3310      	adds	r3, #16
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f000 ff80 	bl	80030b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80021b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80021b2:	f000 faea 	bl	800278a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80021b6:	f000 fdbd 	bl	8002d34 <xTaskResumeAll>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f47f af7c 	bne.w	80020ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80021c2:	4b0c      	ldr	r3, [pc, #48]	@ (80021f4 <xQueueGenericSend+0x200>)
 80021c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	f3bf 8f4f 	dsb	sy
 80021ce:	f3bf 8f6f 	isb	sy
 80021d2:	e772      	b.n	80020ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80021d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80021d6:	f000 fad8 	bl	800278a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80021da:	f000 fdab 	bl	8002d34 <xTaskResumeAll>
 80021de:	e76c      	b.n	80020ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80021e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80021e2:	f000 fad2 	bl	800278a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80021e6:	f000 fda5 	bl	8002d34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80021ea:	2300      	movs	r3, #0
		}
	}
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3738      	adds	r7, #56	@ 0x38
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	e000ed04 	.word	0xe000ed04

080021f8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08e      	sub	sp, #56	@ 0x38
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10b      	bne.n	8002224 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800220c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002210:	f383 8811 	msr	BASEPRI, r3
 8002214:	f3bf 8f6f 	isb	sy
 8002218:	f3bf 8f4f 	dsb	sy
 800221c:	623b      	str	r3, [r7, #32]
}
 800221e:	bf00      	nop
 8002220:	bf00      	nop
 8002222:	e7fd      	b.n	8002220 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00b      	beq.n	8002244 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800222c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002230:	f383 8811 	msr	BASEPRI, r3
 8002234:	f3bf 8f6f 	isb	sy
 8002238:	f3bf 8f4f 	dsb	sy
 800223c:	61fb      	str	r3, [r7, #28]
}
 800223e:	bf00      	nop
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d103      	bne.n	8002254 <xQueueGiveFromISR+0x5c>
 800224c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <xQueueGiveFromISR+0x60>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <xQueueGiveFromISR+0x62>
 8002258:	2300      	movs	r3, #0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10b      	bne.n	8002276 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800225e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002262:	f383 8811 	msr	BASEPRI, r3
 8002266:	f3bf 8f6f 	isb	sy
 800226a:	f3bf 8f4f 	dsb	sy
 800226e:	61bb      	str	r3, [r7, #24]
}
 8002270:	bf00      	nop
 8002272:	bf00      	nop
 8002274:	e7fd      	b.n	8002272 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002276:	f001 fd03 	bl	8003c80 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800227a:	f3ef 8211 	mrs	r2, BASEPRI
 800227e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002282:	f383 8811 	msr	BASEPRI, r3
 8002286:	f3bf 8f6f 	isb	sy
 800228a:	f3bf 8f4f 	dsb	sy
 800228e:	617a      	str	r2, [r7, #20]
 8002290:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002292:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002294:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800229a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800229c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800229e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d22b      	bcs.n	80022fe <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80022a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80022ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80022b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80022b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c0:	d112      	bne.n	80022e8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d016      	beq.n	80022f8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022cc:	3324      	adds	r3, #36	@ 0x24
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 ff14 	bl	80030fc <xTaskRemoveFromEventList>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00e      	beq.n	80022f8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00b      	beq.n	80022f8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	2201      	movs	r2, #1
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	e007      	b.n	80022f8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80022e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022ec:	3301      	adds	r3, #1
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	b25a      	sxtb	r2, r3
 80022f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80022f8:	2301      	movs	r3, #1
 80022fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80022fc:	e001      	b.n	8002302 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	637b      	str	r3, [r7, #52]	@ 0x34
 8002302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002304:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800230c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800230e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002310:	4618      	mov	r0, r3
 8002312:	3738      	adds	r7, #56	@ 0x38
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08e      	sub	sp, #56	@ 0x38
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002322:	2300      	movs	r3, #0
 8002324:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800232a:	2300      	movs	r3, #0
 800232c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800232e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10b      	bne.n	800234c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002338:	f383 8811 	msr	BASEPRI, r3
 800233c:	f3bf 8f6f 	isb	sy
 8002340:	f3bf 8f4f 	dsb	sy
 8002344:	623b      	str	r3, [r7, #32]
}
 8002346:	bf00      	nop
 8002348:	bf00      	nop
 800234a:	e7fd      	b.n	8002348 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800234c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800234e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00b      	beq.n	800236c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002358:	f383 8811 	msr	BASEPRI, r3
 800235c:	f3bf 8f6f 	isb	sy
 8002360:	f3bf 8f4f 	dsb	sy
 8002364:	61fb      	str	r3, [r7, #28]
}
 8002366:	bf00      	nop
 8002368:	bf00      	nop
 800236a:	e7fd      	b.n	8002368 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800236c:	f001 f890 	bl	8003490 <xTaskGetSchedulerState>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d102      	bne.n	800237c <xQueueSemaphoreTake+0x64>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <xQueueSemaphoreTake+0x68>
 800237c:	2301      	movs	r3, #1
 800237e:	e000      	b.n	8002382 <xQueueSemaphoreTake+0x6a>
 8002380:	2300      	movs	r3, #0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10b      	bne.n	800239e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8002386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800238a:	f383 8811 	msr	BASEPRI, r3
 800238e:	f3bf 8f6f 	isb	sy
 8002392:	f3bf 8f4f 	dsb	sy
 8002396:	61bb      	str	r3, [r7, #24]
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	e7fd      	b.n	800239a <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800239e:	f001 fbad 	bl	8003afc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80023a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023a6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80023a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d024      	beq.n	80023f8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80023ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b0:	1e5a      	subs	r2, r3, #1
 80023b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023b4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80023b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d104      	bne.n	80023c8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80023be:	f001 fa35 	bl	800382c <pvTaskIncrementMutexHeldCount>
 80023c2:	4602      	mov	r2, r0
 80023c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c6:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00f      	beq.n	80023f0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d2:	3310      	adds	r3, #16
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 fe91 	bl	80030fc <xTaskRemoveFromEventList>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d007      	beq.n	80023f0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80023e0:	4b54      	ldr	r3, [pc, #336]	@ (8002534 <xQueueSemaphoreTake+0x21c>)
 80023e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	f3bf 8f4f 	dsb	sy
 80023ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80023f0:	f001 fbb4 	bl	8003b5c <vPortExitCritical>
				return pdPASS;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e098      	b.n	800252a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d112      	bne.n	8002424 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80023fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00b      	beq.n	800241c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8002404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002408:	f383 8811 	msr	BASEPRI, r3
 800240c:	f3bf 8f6f 	isb	sy
 8002410:	f3bf 8f4f 	dsb	sy
 8002414:	617b      	str	r3, [r7, #20]
}
 8002416:	bf00      	nop
 8002418:	bf00      	nop
 800241a:	e7fd      	b.n	8002418 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800241c:	f001 fb9e 	bl	8003b5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002420:	2300      	movs	r3, #0
 8002422:	e082      	b.n	800252a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002426:	2b00      	cmp	r3, #0
 8002428:	d106      	bne.n	8002438 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800242a:	f107 030c 	add.w	r3, r7, #12
 800242e:	4618      	mov	r0, r3
 8002430:	f000 fec8 	bl	80031c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002434:	2301      	movs	r3, #1
 8002436:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002438:	f001 fb90 	bl	8003b5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800243c:	f000 fc6c 	bl	8002d18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002440:	f001 fb5c 	bl	8003afc <vPortEnterCritical>
 8002444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002446:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800244a:	b25b      	sxtb	r3, r3
 800244c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002450:	d103      	bne.n	800245a <xQueueSemaphoreTake+0x142>
 8002452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800245a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800245c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002460:	b25b      	sxtb	r3, r3
 8002462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002466:	d103      	bne.n	8002470 <xQueueSemaphoreTake+0x158>
 8002468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002470:	f001 fb74 	bl	8003b5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002474:	463a      	mov	r2, r7
 8002476:	f107 030c 	add.w	r3, r7, #12
 800247a:	4611      	mov	r1, r2
 800247c:	4618      	mov	r0, r3
 800247e:	f000 feb7 	bl	80031f0 <xTaskCheckForTimeOut>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d132      	bne.n	80024ee <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002488:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800248a:	f000 f9d0 	bl	800282e <prvIsQueueEmpty>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d026      	beq.n	80024e2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d109      	bne.n	80024b0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800249c:	f001 fb2e 	bl	8003afc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80024a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f001 f811 	bl	80034cc <xTaskPriorityInherit>
 80024aa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80024ac:	f001 fb56 	bl	8003b5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80024b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024b2:	3324      	adds	r3, #36	@ 0x24
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 fdf9 	bl	80030b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80024be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024c0:	f000 f963 	bl	800278a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80024c4:	f000 fc36 	bl	8002d34 <xTaskResumeAll>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f47f af67 	bne.w	800239e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80024d0:	4b18      	ldr	r3, [pc, #96]	@ (8002534 <xQueueSemaphoreTake+0x21c>)
 80024d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	f3bf 8f4f 	dsb	sy
 80024dc:	f3bf 8f6f 	isb	sy
 80024e0:	e75d      	b.n	800239e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80024e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024e4:	f000 f951 	bl	800278a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80024e8:	f000 fc24 	bl	8002d34 <xTaskResumeAll>
 80024ec:	e757      	b.n	800239e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80024ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024f0:	f000 f94b 	bl	800278a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80024f4:	f000 fc1e 	bl	8002d34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80024f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024fa:	f000 f998 	bl	800282e <prvIsQueueEmpty>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	f43f af4c 	beq.w	800239e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00d      	beq.n	8002528 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800250c:	f001 faf6 	bl	8003afc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002510:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002512:	f000 f893 	bl	800263c <prvGetDisinheritPriorityAfterTimeout>
 8002516:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800251e:	4618      	mov	r0, r3
 8002520:	f001 f8e2 	bl	80036e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002524:	f001 fb1a 	bl	8003b5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002528:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800252a:	4618      	mov	r0, r3
 800252c:	3738      	adds	r7, #56	@ 0x38
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	e000ed04 	.word	0xe000ed04

08002538 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08e      	sub	sp, #56	@ 0x38
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10b      	bne.n	8002566 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800254e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002552:	f383 8811 	msr	BASEPRI, r3
 8002556:	f3bf 8f6f 	isb	sy
 800255a:	f3bf 8f4f 	dsb	sy
 800255e:	623b      	str	r3, [r7, #32]
}
 8002560:	bf00      	nop
 8002562:	bf00      	nop
 8002564:	e7fd      	b.n	8002562 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d103      	bne.n	8002574 <xQueueReceiveFromISR+0x3c>
 800256c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800256e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <xQueueReceiveFromISR+0x40>
 8002574:	2301      	movs	r3, #1
 8002576:	e000      	b.n	800257a <xQueueReceiveFromISR+0x42>
 8002578:	2300      	movs	r3, #0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10b      	bne.n	8002596 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800257e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002582:	f383 8811 	msr	BASEPRI, r3
 8002586:	f3bf 8f6f 	isb	sy
 800258a:	f3bf 8f4f 	dsb	sy
 800258e:	61fb      	str	r3, [r7, #28]
}
 8002590:	bf00      	nop
 8002592:	bf00      	nop
 8002594:	e7fd      	b.n	8002592 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002596:	f001 fb73 	bl	8003c80 <vPortValidateInterruptPriority>
	__asm volatile
 800259a:	f3ef 8211 	mrs	r2, BASEPRI
 800259e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025a2:	f383 8811 	msr	BASEPRI, r3
 80025a6:	f3bf 8f6f 	isb	sy
 80025aa:	f3bf 8f4f 	dsb	sy
 80025ae:	61ba      	str	r2, [r7, #24]
 80025b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80025b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80025b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d02f      	beq.n	8002622 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80025c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025d0:	f000 f8b5 	bl	800273e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80025d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d6:	1e5a      	subs	r2, r3, #1
 80025d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025da:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80025dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80025e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e4:	d112      	bne.n	800260c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d016      	beq.n	800261c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f0:	3310      	adds	r3, #16
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 fd82 	bl	80030fc <xTaskRemoveFromEventList>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00e      	beq.n	800261c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00b      	beq.n	800261c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	e007      	b.n	800261c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800260c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002610:	3301      	adds	r3, #1
 8002612:	b2db      	uxtb	r3, r3
 8002614:	b25a      	sxtb	r2, r3
 8002616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002618:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800261c:	2301      	movs	r3, #1
 800261e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002620:	e001      	b.n	8002626 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8002622:	2300      	movs	r3, #0
 8002624:	637b      	str	r3, [r7, #52]	@ 0x34
 8002626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002628:	613b      	str	r3, [r7, #16]
	__asm volatile
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	f383 8811 	msr	BASEPRI, r3
}
 8002630:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002634:	4618      	mov	r0, r3
 8002636:	3738      	adds	r7, #56	@ 0x38
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002648:	2b00      	cmp	r3, #0
 800264a:	d006      	beq.n	800265a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f1c3 0307 	rsb	r3, r3, #7
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	e001      	b.n	800265e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800265e:	68fb      	ldr	r3, [r7, #12]
	}
 8002660:	4618      	mov	r0, r3
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b086      	sub	sp, #24
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800267e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10d      	bne.n	80026a4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d14d      	bne.n	800272c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4618      	mov	r0, r3
 8002696:	f000 ff9f 	bl	80035d8 <xTaskPriorityDisinherit>
 800269a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	e043      	b.n	800272c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d119      	bne.n	80026de <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6898      	ldr	r0, [r3, #8]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b2:	461a      	mov	r2, r3
 80026b4:	68b9      	ldr	r1, [r7, #8]
 80026b6:	f001 fd85 	bl	80041c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c2:	441a      	add	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d32b      	bcc.n	800272c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	e026      	b.n	800272c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	68d8      	ldr	r0, [r3, #12]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	461a      	mov	r2, r3
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	f001 fd6b 	bl	80041c4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	425b      	negs	r3, r3
 80026f8:	441a      	add	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d207      	bcs.n	800271a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	425b      	negs	r3, r3
 8002714:	441a      	add	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b02      	cmp	r3, #2
 800271e:	d105      	bne.n	800272c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d002      	beq.n	800272c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	3b01      	subs	r3, #1
 800272a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002734:	697b      	ldr	r3, [r7, #20]
}
 8002736:	4618      	mov	r0, r3
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274c:	2b00      	cmp	r3, #0
 800274e:	d018      	beq.n	8002782 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002758:	441a      	add	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	429a      	cmp	r2, r3
 8002768:	d303      	bcc.n	8002772 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68d9      	ldr	r1, [r3, #12]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	461a      	mov	r2, r3
 800277c:	6838      	ldr	r0, [r7, #0]
 800277e:	f001 fd21 	bl	80041c4 <memcpy>
	}
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002792:	f001 f9b3 	bl	8003afc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800279c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800279e:	e011      	b.n	80027c4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d012      	beq.n	80027ce <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3324      	adds	r3, #36	@ 0x24
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fca5 	bl	80030fc <xTaskRemoveFromEventList>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80027b8:	f000 fd7e 	bl	80032b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	3b01      	subs	r3, #1
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80027c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	dce9      	bgt.n	80027a0 <prvUnlockQueue+0x16>
 80027cc:	e000      	b.n	80027d0 <prvUnlockQueue+0x46>
					break;
 80027ce:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	22ff      	movs	r2, #255	@ 0xff
 80027d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80027d8:	f001 f9c0 	bl	8003b5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80027dc:	f001 f98e 	bl	8003afc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027e6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027e8:	e011      	b.n	800280e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d012      	beq.n	8002818 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3310      	adds	r3, #16
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 fc80 	bl	80030fc <xTaskRemoveFromEventList>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002802:	f000 fd59 	bl	80032b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002806:	7bbb      	ldrb	r3, [r7, #14]
 8002808:	3b01      	subs	r3, #1
 800280a:	b2db      	uxtb	r3, r3
 800280c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800280e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002812:	2b00      	cmp	r3, #0
 8002814:	dce9      	bgt.n	80027ea <prvUnlockQueue+0x60>
 8002816:	e000      	b.n	800281a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002818:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	22ff      	movs	r2, #255	@ 0xff
 800281e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002822:	f001 f99b 	bl	8003b5c <vPortExitCritical>
}
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002836:	f001 f961 	bl	8003afc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800283e:	2b00      	cmp	r3, #0
 8002840:	d102      	bne.n	8002848 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002842:	2301      	movs	r3, #1
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	e001      	b.n	800284c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800284c:	f001 f986 	bl	8003b5c <vPortExitCritical>

	return xReturn;
 8002850:	68fb      	ldr	r3, [r7, #12]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b084      	sub	sp, #16
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002862:	f001 f94b 	bl	8003afc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800286e:	429a      	cmp	r2, r3
 8002870:	d102      	bne.n	8002878 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002872:	2301      	movs	r3, #1
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	e001      	b.n	800287c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800287c:	f001 f96e 	bl	8003b5c <vPortExitCritical>

	return xReturn;
 8002880:	68fb      	ldr	r3, [r7, #12]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800288a:	b580      	push	{r7, lr}
 800288c:	b08e      	sub	sp, #56	@ 0x38
 800288e:	af04      	add	r7, sp, #16
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	607a      	str	r2, [r7, #4]
 8002896:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10b      	bne.n	80028b6 <xTaskCreateStatic+0x2c>
	__asm volatile
 800289e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028a2:	f383 8811 	msr	BASEPRI, r3
 80028a6:	f3bf 8f6f 	isb	sy
 80028aa:	f3bf 8f4f 	dsb	sy
 80028ae:	623b      	str	r3, [r7, #32]
}
 80028b0:	bf00      	nop
 80028b2:	bf00      	nop
 80028b4:	e7fd      	b.n	80028b2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80028b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10b      	bne.n	80028d4 <xTaskCreateStatic+0x4a>
	__asm volatile
 80028bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c0:	f383 8811 	msr	BASEPRI, r3
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	61fb      	str	r3, [r7, #28]
}
 80028ce:	bf00      	nop
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80028d4:	23a0      	movs	r3, #160	@ 0xa0
 80028d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	2ba0      	cmp	r3, #160	@ 0xa0
 80028dc:	d00b      	beq.n	80028f6 <xTaskCreateStatic+0x6c>
	__asm volatile
 80028de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028e2:	f383 8811 	msr	BASEPRI, r3
 80028e6:	f3bf 8f6f 	isb	sy
 80028ea:	f3bf 8f4f 	dsb	sy
 80028ee:	61bb      	str	r3, [r7, #24]
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	e7fd      	b.n	80028f2 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80028f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01e      	beq.n	800293a <xTaskCreateStatic+0xb0>
 80028fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d01b      	beq.n	800293a <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800290a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800290c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290e:	2202      	movs	r2, #2
 8002910:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002914:	2300      	movs	r3, #0
 8002916:	9303      	str	r3, [sp, #12]
 8002918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291a:	9302      	str	r3, [sp, #8]
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 f851 	bl	80029d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002932:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002934:	f000 f8e6 	bl	8002b04 <prvAddNewTaskToReadyList>
 8002938:	e001      	b.n	800293e <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800293e:	697b      	ldr	r3, [r7, #20]
	}
 8002940:	4618      	mov	r0, r3
 8002942:	3728      	adds	r7, #40	@ 0x28
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08c      	sub	sp, #48	@ 0x30
 800294c:	af04      	add	r7, sp, #16
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	4613      	mov	r3, r2
 8002956:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002958:	88fb      	ldrh	r3, [r7, #6]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4618      	mov	r0, r3
 800295e:	f001 f9cf 	bl	8003d00 <pvPortMalloc>
 8002962:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00e      	beq.n	8002988 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800296a:	20a0      	movs	r0, #160	@ 0xa0
 800296c:	f001 f9c8 	bl	8003d00 <pvPortMalloc>
 8002970:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	631a      	str	r2, [r3, #48]	@ 0x30
 800297e:	e005      	b.n	800298c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002980:	6978      	ldr	r0, [r7, #20]
 8002982:	f001 fa85 	bl	8003e90 <vPortFree>
 8002986:	e001      	b.n	800298c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d017      	beq.n	80029c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800299a:	88fa      	ldrh	r2, [r7, #6]
 800299c:	2300      	movs	r3, #0
 800299e:	9303      	str	r3, [sp, #12]
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	9302      	str	r3, [sp, #8]
 80029a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	68b9      	ldr	r1, [r7, #8]
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 f80f 	bl	80029d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029b6:	69f8      	ldr	r0, [r7, #28]
 80029b8:	f000 f8a4 	bl	8002b04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80029bc:	2301      	movs	r3, #1
 80029be:	61bb      	str	r3, [r7, #24]
 80029c0:	e002      	b.n	80029c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295
 80029c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80029c8:	69bb      	ldr	r3, [r7, #24]
	}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3720      	adds	r7, #32
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80029e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80029ec:	3b01      	subs	r3, #1
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	f023 0307 	bic.w	r3, r3, #7
 80029fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00b      	beq.n	8002a1e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a0a:	f383 8811 	msr	BASEPRI, r3
 8002a0e:	f3bf 8f6f 	isb	sy
 8002a12:	f3bf 8f4f 	dsb	sy
 8002a16:	617b      	str	r3, [r7, #20]
}
 8002a18:	bf00      	nop
 8002a1a:	bf00      	nop
 8002a1c:	e7fd      	b.n	8002a1a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
 8002a22:	e012      	b.n	8002a4a <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	4413      	add	r3, r2
 8002a2a:	7819      	ldrb	r1, [r3, #0]
 8002a2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	4413      	add	r3, r2
 8002a32:	3334      	adds	r3, #52	@ 0x34
 8002a34:	460a      	mov	r2, r1
 8002a36:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d006      	beq.n	8002a52 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	3301      	adds	r3, #1
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	2b0f      	cmp	r3, #15
 8002a4e:	d9e9      	bls.n	8002a24 <prvInitialiseNewTask+0x50>
 8002a50:	e000      	b.n	8002a54 <prvInitialiseNewTask+0x80>
		{
			break;
 8002a52:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a5e:	2b06      	cmp	r3, #6
 8002a60:	d901      	bls.n	8002a66 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a62:	2306      	movs	r3, #6
 8002a64:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a70:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a74:	2200      	movs	r2, #0
 8002a76:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff f8e4 	bl	8001c4a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a84:	3318      	adds	r3, #24
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff f8df 	bl	8001c4a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a90:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a94:	f1c3 0207 	rsb	r2, r3, #7
 8002a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a9a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002aa0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab4:	334c      	adds	r3, #76	@ 0x4c
 8002ab6:	224c      	movs	r2, #76	@ 0x4c
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4618      	mov	r0, r3
 8002abc:	f001 fafe 	bl	80040bc <memset>
 8002ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac2:	4a0d      	ldr	r2, [pc, #52]	@ (8002af8 <prvInitialiseNewTask+0x124>)
 8002ac4:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac8:	4a0c      	ldr	r2, [pc, #48]	@ (8002afc <prvInitialiseNewTask+0x128>)
 8002aca:	655a      	str	r2, [r3, #84]	@ 0x54
 8002acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ace:	4a0c      	ldr	r2, [pc, #48]	@ (8002b00 <prvInitialiseNewTask+0x12c>)
 8002ad0:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	68f9      	ldr	r1, [r7, #12]
 8002ad6:	69b8      	ldr	r0, [r7, #24]
 8002ad8:	f000 ff22 	bl	8003920 <pxPortInitialiseStack>
 8002adc:	4602      	mov	r2, r0
 8002ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002aec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002aee:	bf00      	nop
 8002af0:	3720      	adds	r7, #32
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	200010d0 	.word	0x200010d0
 8002afc:	20001138 	.word	0x20001138
 8002b00:	200011a0 	.word	0x200011a0

08002b04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b0c:	f000 fff6 	bl	8003afc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b10:	4b2a      	ldr	r3, [pc, #168]	@ (8002bbc <prvAddNewTaskToReadyList+0xb8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	3301      	adds	r3, #1
 8002b16:	4a29      	ldr	r2, [pc, #164]	@ (8002bbc <prvAddNewTaskToReadyList+0xb8>)
 8002b18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b1a:	4b29      	ldr	r3, [pc, #164]	@ (8002bc0 <prvAddNewTaskToReadyList+0xbc>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b22:	4a27      	ldr	r2, [pc, #156]	@ (8002bc0 <prvAddNewTaskToReadyList+0xbc>)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b28:	4b24      	ldr	r3, [pc, #144]	@ (8002bbc <prvAddNewTaskToReadyList+0xb8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d110      	bne.n	8002b52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b30:	f000 fbe6 	bl	8003300 <prvInitialiseTaskLists>
 8002b34:	e00d      	b.n	8002b52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b36:	4b23      	ldr	r3, [pc, #140]	@ (8002bc4 <prvAddNewTaskToReadyList+0xc0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d109      	bne.n	8002b52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b3e:	4b20      	ldr	r3, [pc, #128]	@ (8002bc0 <prvAddNewTaskToReadyList+0xbc>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d802      	bhi.n	8002b52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8002bc0 <prvAddNewTaskToReadyList+0xbc>)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002b52:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc8 <prvAddNewTaskToReadyList+0xc4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	3301      	adds	r3, #1
 8002b58:	4a1b      	ldr	r2, [pc, #108]	@ (8002bc8 <prvAddNewTaskToReadyList+0xc4>)
 8002b5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b60:	2201      	movs	r2, #1
 8002b62:	409a      	lsls	r2, r3
 8002b64:	4b19      	ldr	r3, [pc, #100]	@ (8002bcc <prvAddNewTaskToReadyList+0xc8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	4a18      	ldr	r2, [pc, #96]	@ (8002bcc <prvAddNewTaskToReadyList+0xc8>)
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4a15      	ldr	r2, [pc, #84]	@ (8002bd0 <prvAddNewTaskToReadyList+0xcc>)
 8002b7c:	441a      	add	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3304      	adds	r3, #4
 8002b82:	4619      	mov	r1, r3
 8002b84:	4610      	mov	r0, r2
 8002b86:	f7ff f86c 	bl	8001c62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002b8a:	f000 ffe7 	bl	8003b5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc4 <prvAddNewTaskToReadyList+0xc0>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00e      	beq.n	8002bb4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b96:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc0 <prvAddNewTaskToReadyList+0xbc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d207      	bcs.n	8002bb4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd4 <prvAddNewTaskToReadyList+0xd0>)
 8002ba6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20000484 	.word	0x20000484
 8002bc0:	20000384 	.word	0x20000384
 8002bc4:	20000490 	.word	0x20000490
 8002bc8:	200004a0 	.word	0x200004a0
 8002bcc:	2000048c 	.word	0x2000048c
 8002bd0:	20000388 	.word	0x20000388
 8002bd4:	e000ed04 	.word	0xe000ed04

08002bd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d018      	beq.n	8002c1c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002bea:	4b14      	ldr	r3, [pc, #80]	@ (8002c3c <vTaskDelay+0x64>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00b      	beq.n	8002c0a <vTaskDelay+0x32>
	__asm volatile
 8002bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bf6:	f383 8811 	msr	BASEPRI, r3
 8002bfa:	f3bf 8f6f 	isb	sy
 8002bfe:	f3bf 8f4f 	dsb	sy
 8002c02:	60bb      	str	r3, [r7, #8]
}
 8002c04:	bf00      	nop
 8002c06:	bf00      	nop
 8002c08:	e7fd      	b.n	8002c06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002c0a:	f000 f885 	bl	8002d18 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c0e:	2100      	movs	r1, #0
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fe1f 	bl	8003854 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002c16:	f000 f88d 	bl	8002d34 <xTaskResumeAll>
 8002c1a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d107      	bne.n	8002c32 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002c22:	4b07      	ldr	r3, [pc, #28]	@ (8002c40 <vTaskDelay+0x68>)
 8002c24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	f3bf 8f4f 	dsb	sy
 8002c2e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002c32:	bf00      	nop
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	200004ac 	.word	0x200004ac
 8002c40:	e000ed04 	.word	0xe000ed04

08002c44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08a      	sub	sp, #40	@ 0x28
 8002c48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002c52:	463a      	mov	r2, r7
 8002c54:	1d39      	adds	r1, r7, #4
 8002c56:	f107 0308 	add.w	r3, r7, #8
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fd fa78 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002c60:	6839      	ldr	r1, [r7, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	9202      	str	r2, [sp, #8]
 8002c68:	9301      	str	r3, [sp, #4]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	460a      	mov	r2, r1
 8002c72:	4921      	ldr	r1, [pc, #132]	@ (8002cf8 <vTaskStartScheduler+0xb4>)
 8002c74:	4821      	ldr	r0, [pc, #132]	@ (8002cfc <vTaskStartScheduler+0xb8>)
 8002c76:	f7ff fe08 	bl	800288a <xTaskCreateStatic>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	4a20      	ldr	r2, [pc, #128]	@ (8002d00 <vTaskStartScheduler+0xbc>)
 8002c7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002c80:	4b1f      	ldr	r3, [pc, #124]	@ (8002d00 <vTaskStartScheduler+0xbc>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	e001      	b.n	8002c92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d11b      	bne.n	8002cd0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c9c:	f383 8811 	msr	BASEPRI, r3
 8002ca0:	f3bf 8f6f 	isb	sy
 8002ca4:	f3bf 8f4f 	dsb	sy
 8002ca8:	613b      	str	r3, [r7, #16]
}
 8002caa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002cac:	4b15      	ldr	r3, [pc, #84]	@ (8002d04 <vTaskStartScheduler+0xc0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	334c      	adds	r3, #76	@ 0x4c
 8002cb2:	4a15      	ldr	r2, [pc, #84]	@ (8002d08 <vTaskStartScheduler+0xc4>)
 8002cb4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002cb6:	4b15      	ldr	r3, [pc, #84]	@ (8002d0c <vTaskStartScheduler+0xc8>)
 8002cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cbc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002cbe:	4b14      	ldr	r3, [pc, #80]	@ (8002d10 <vTaskStartScheduler+0xcc>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002cc4:	4b13      	ldr	r3, [pc, #76]	@ (8002d14 <vTaskStartScheduler+0xd0>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002cca:	f000 fea5 	bl	8003a18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002cce:	e00f      	b.n	8002cf0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd6:	d10b      	bne.n	8002cf0 <vTaskStartScheduler+0xac>
	__asm volatile
 8002cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cdc:	f383 8811 	msr	BASEPRI, r3
 8002ce0:	f3bf 8f6f 	isb	sy
 8002ce4:	f3bf 8f4f 	dsb	sy
 8002ce8:	60fb      	str	r3, [r7, #12]
}
 8002cea:	bf00      	nop
 8002cec:	bf00      	nop
 8002cee:	e7fd      	b.n	8002cec <vTaskStartScheduler+0xa8>
}
 8002cf0:	bf00      	nop
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	08004348 	.word	0x08004348
 8002cfc:	080032d1 	.word	0x080032d1
 8002d00:	200004a8 	.word	0x200004a8
 8002d04:	20000384 	.word	0x20000384
 8002d08:	20000014 	.word	0x20000014
 8002d0c:	200004a4 	.word	0x200004a4
 8002d10:	20000490 	.word	0x20000490
 8002d14:	20000488 	.word	0x20000488

08002d18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002d1c:	4b04      	ldr	r3, [pc, #16]	@ (8002d30 <vTaskSuspendAll+0x18>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3301      	adds	r3, #1
 8002d22:	4a03      	ldr	r2, [pc, #12]	@ (8002d30 <vTaskSuspendAll+0x18>)
 8002d24:	6013      	str	r3, [r2, #0]
}
 8002d26:	bf00      	nop
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	200004ac 	.word	0x200004ac

08002d34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002d42:	4b42      	ldr	r3, [pc, #264]	@ (8002e4c <xTaskResumeAll+0x118>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10b      	bne.n	8002d62 <xTaskResumeAll+0x2e>
	__asm volatile
 8002d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d4e:	f383 8811 	msr	BASEPRI, r3
 8002d52:	f3bf 8f6f 	isb	sy
 8002d56:	f3bf 8f4f 	dsb	sy
 8002d5a:	603b      	str	r3, [r7, #0]
}
 8002d5c:	bf00      	nop
 8002d5e:	bf00      	nop
 8002d60:	e7fd      	b.n	8002d5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002d62:	f000 fecb 	bl	8003afc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002d66:	4b39      	ldr	r3, [pc, #228]	@ (8002e4c <xTaskResumeAll+0x118>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	4a37      	ldr	r2, [pc, #220]	@ (8002e4c <xTaskResumeAll+0x118>)
 8002d6e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d70:	4b36      	ldr	r3, [pc, #216]	@ (8002e4c <xTaskResumeAll+0x118>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d161      	bne.n	8002e3c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d78:	4b35      	ldr	r3, [pc, #212]	@ (8002e50 <xTaskResumeAll+0x11c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d05d      	beq.n	8002e3c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d80:	e02e      	b.n	8002de0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002d82:	4b34      	ldr	r3, [pc, #208]	@ (8002e54 <xTaskResumeAll+0x120>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	3318      	adds	r3, #24
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fe ffc2 	bl	8001d18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3304      	adds	r3, #4
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fe ffbd 	bl	8001d18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da2:	2201      	movs	r2, #1
 8002da4:	409a      	lsls	r2, r3
 8002da6:	4b2c      	ldr	r3, [pc, #176]	@ (8002e58 <xTaskResumeAll+0x124>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	4a2a      	ldr	r2, [pc, #168]	@ (8002e58 <xTaskResumeAll+0x124>)
 8002dae:	6013      	str	r3, [r2, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4a27      	ldr	r2, [pc, #156]	@ (8002e5c <xTaskResumeAll+0x128>)
 8002dbe:	441a      	add	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	f7fe ff4b 	bl	8001c62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dd0:	4b23      	ldr	r3, [pc, #140]	@ (8002e60 <xTaskResumeAll+0x12c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d302      	bcc.n	8002de0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002dda:	4b22      	ldr	r3, [pc, #136]	@ (8002e64 <xTaskResumeAll+0x130>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002de0:	4b1c      	ldr	r3, [pc, #112]	@ (8002e54 <xTaskResumeAll+0x120>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1cc      	bne.n	8002d82 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002dee:	f000 fb2b 	bl	8003448 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002df2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e68 <xTaskResumeAll+0x134>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d010      	beq.n	8002e20 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002dfe:	f000 f837 	bl	8002e70 <xTaskIncrementTick>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002e08:	4b16      	ldr	r3, [pc, #88]	@ (8002e64 <xTaskResumeAll+0x130>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f1      	bne.n	8002dfe <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8002e1a:	4b13      	ldr	r3, [pc, #76]	@ (8002e68 <xTaskResumeAll+0x134>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002e20:	4b10      	ldr	r3, [pc, #64]	@ (8002e64 <xTaskResumeAll+0x130>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d009      	beq.n	8002e3c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e6c <xTaskResumeAll+0x138>)
 8002e2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e3c:	f000 fe8e 	bl	8003b5c <vPortExitCritical>

	return xAlreadyYielded;
 8002e40:	68bb      	ldr	r3, [r7, #8]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	200004ac 	.word	0x200004ac
 8002e50:	20000484 	.word	0x20000484
 8002e54:	20000444 	.word	0x20000444
 8002e58:	2000048c 	.word	0x2000048c
 8002e5c:	20000388 	.word	0x20000388
 8002e60:	20000384 	.word	0x20000384
 8002e64:	20000498 	.word	0x20000498
 8002e68:	20000494 	.word	0x20000494
 8002e6c:	e000ed04 	.word	0xe000ed04

08002e70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e7a:	4b51      	ldr	r3, [pc, #324]	@ (8002fc0 <xTaskIncrementTick+0x150>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f040 808e 	bne.w	8002fa0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e84:	4b4f      	ldr	r3, [pc, #316]	@ (8002fc4 <xTaskIncrementTick+0x154>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002e8c:	4a4d      	ldr	r2, [pc, #308]	@ (8002fc4 <xTaskIncrementTick+0x154>)
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d121      	bne.n	8002edc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002e98:	4b4b      	ldr	r3, [pc, #300]	@ (8002fc8 <xTaskIncrementTick+0x158>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00b      	beq.n	8002eba <xTaskIncrementTick+0x4a>
	__asm volatile
 8002ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ea6:	f383 8811 	msr	BASEPRI, r3
 8002eaa:	f3bf 8f6f 	isb	sy
 8002eae:	f3bf 8f4f 	dsb	sy
 8002eb2:	603b      	str	r3, [r7, #0]
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	e7fd      	b.n	8002eb6 <xTaskIncrementTick+0x46>
 8002eba:	4b43      	ldr	r3, [pc, #268]	@ (8002fc8 <xTaskIncrementTick+0x158>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	4b42      	ldr	r3, [pc, #264]	@ (8002fcc <xTaskIncrementTick+0x15c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a40      	ldr	r2, [pc, #256]	@ (8002fc8 <xTaskIncrementTick+0x158>)
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	4a40      	ldr	r2, [pc, #256]	@ (8002fcc <xTaskIncrementTick+0x15c>)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	4b40      	ldr	r3, [pc, #256]	@ (8002fd0 <xTaskIncrementTick+0x160>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	4a3e      	ldr	r2, [pc, #248]	@ (8002fd0 <xTaskIncrementTick+0x160>)
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	f000 fab6 	bl	8003448 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002edc:	4b3d      	ldr	r3, [pc, #244]	@ (8002fd4 <xTaskIncrementTick+0x164>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d34d      	bcc.n	8002f82 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ee6:	4b38      	ldr	r3, [pc, #224]	@ (8002fc8 <xTaskIncrementTick+0x158>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <xTaskIncrementTick+0x84>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <xTaskIncrementTick+0x86>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d004      	beq.n	8002f04 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002efa:	4b36      	ldr	r3, [pc, #216]	@ (8002fd4 <xTaskIncrementTick+0x164>)
 8002efc:	f04f 32ff 	mov.w	r2, #4294967295
 8002f00:	601a      	str	r2, [r3, #0]
					break;
 8002f02:	e03e      	b.n	8002f82 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f04:	4b30      	ldr	r3, [pc, #192]	@ (8002fc8 <xTaskIncrementTick+0x158>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d203      	bcs.n	8002f24 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002f1c:	4a2d      	ldr	r2, [pc, #180]	@ (8002fd4 <xTaskIncrementTick+0x164>)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6013      	str	r3, [r2, #0]
						break;
 8002f22:	e02e      	b.n	8002f82 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	3304      	adds	r3, #4
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fe fef5 	bl	8001d18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d004      	beq.n	8002f40 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	3318      	adds	r3, #24
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fe feec 	bl	8001d18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f44:	2201      	movs	r2, #1
 8002f46:	409a      	lsls	r2, r3
 8002f48:	4b23      	ldr	r3, [pc, #140]	@ (8002fd8 <xTaskIncrementTick+0x168>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	4a22      	ldr	r2, [pc, #136]	@ (8002fd8 <xTaskIncrementTick+0x168>)
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8002fdc <xTaskIncrementTick+0x16c>)
 8002f60:	441a      	add	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	3304      	adds	r3, #4
 8002f66:	4619      	mov	r1, r3
 8002f68:	4610      	mov	r0, r2
 8002f6a:	f7fe fe7a 	bl	8001c62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f72:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe0 <xTaskIncrementTick+0x170>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d3b4      	bcc.n	8002ee6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f80:	e7b1      	b.n	8002ee6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f82:	4b17      	ldr	r3, [pc, #92]	@ (8002fe0 <xTaskIncrementTick+0x170>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f88:	4914      	ldr	r1, [pc, #80]	@ (8002fdc <xTaskIncrementTick+0x16c>)
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d907      	bls.n	8002faa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	e004      	b.n	8002faa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002fa0:	4b10      	ldr	r3, [pc, #64]	@ (8002fe4 <xTaskIncrementTick+0x174>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8002fe4 <xTaskIncrementTick+0x174>)
 8002fa8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002faa:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe8 <xTaskIncrementTick+0x178>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002fb6:	697b      	ldr	r3, [r7, #20]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	200004ac 	.word	0x200004ac
 8002fc4:	20000488 	.word	0x20000488
 8002fc8:	2000043c 	.word	0x2000043c
 8002fcc:	20000440 	.word	0x20000440
 8002fd0:	2000049c 	.word	0x2000049c
 8002fd4:	200004a4 	.word	0x200004a4
 8002fd8:	2000048c 	.word	0x2000048c
 8002fdc:	20000388 	.word	0x20000388
 8002fe0:	20000384 	.word	0x20000384
 8002fe4:	20000494 	.word	0x20000494
 8002fe8:	20000498 	.word	0x20000498

08002fec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ff2:	4b29      	ldr	r3, [pc, #164]	@ (8003098 <vTaskSwitchContext+0xac>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002ffa:	4b28      	ldr	r3, [pc, #160]	@ (800309c <vTaskSwitchContext+0xb0>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003000:	e045      	b.n	800308e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003002:	4b26      	ldr	r3, [pc, #152]	@ (800309c <vTaskSwitchContext+0xb0>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003008:	4b25      	ldr	r3, [pc, #148]	@ (80030a0 <vTaskSwitchContext+0xb4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	fab3 f383 	clz	r3, r3
 8003014:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003016:	7afb      	ldrb	r3, [r7, #11]
 8003018:	f1c3 031f 	rsb	r3, r3, #31
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	4921      	ldr	r1, [pc, #132]	@ (80030a4 <vTaskSwitchContext+0xb8>)
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	4613      	mov	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10b      	bne.n	800304a <vTaskSwitchContext+0x5e>
	__asm volatile
 8003032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003036:	f383 8811 	msr	BASEPRI, r3
 800303a:	f3bf 8f6f 	isb	sy
 800303e:	f3bf 8f4f 	dsb	sy
 8003042:	607b      	str	r3, [r7, #4]
}
 8003044:	bf00      	nop
 8003046:	bf00      	nop
 8003048:	e7fd      	b.n	8003046 <vTaskSwitchContext+0x5a>
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4a13      	ldr	r2, [pc, #76]	@ (80030a4 <vTaskSwitchContext+0xb8>)
 8003056:	4413      	add	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	3308      	adds	r3, #8
 800306c:	429a      	cmp	r2, r3
 800306e:	d104      	bne.n	800307a <vTaskSwitchContext+0x8e>
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	4a09      	ldr	r2, [pc, #36]	@ (80030a8 <vTaskSwitchContext+0xbc>)
 8003082:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003084:	4b08      	ldr	r3, [pc, #32]	@ (80030a8 <vTaskSwitchContext+0xbc>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	334c      	adds	r3, #76	@ 0x4c
 800308a:	4a08      	ldr	r2, [pc, #32]	@ (80030ac <vTaskSwitchContext+0xc0>)
 800308c:	6013      	str	r3, [r2, #0]
}
 800308e:	bf00      	nop
 8003090:	371c      	adds	r7, #28
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr
 8003098:	200004ac 	.word	0x200004ac
 800309c:	20000498 	.word	0x20000498
 80030a0:	2000048c 	.word	0x2000048c
 80030a4:	20000388 	.word	0x20000388
 80030a8:	20000384 	.word	0x20000384
 80030ac:	20000014 	.word	0x20000014

080030b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10b      	bne.n	80030d8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80030c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c4:	f383 8811 	msr	BASEPRI, r3
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	60fb      	str	r3, [r7, #12]
}
 80030d2:	bf00      	nop
 80030d4:	bf00      	nop
 80030d6:	e7fd      	b.n	80030d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030d8:	4b07      	ldr	r3, [pc, #28]	@ (80030f8 <vTaskPlaceOnEventList+0x48>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	3318      	adds	r3, #24
 80030de:	4619      	mov	r1, r3
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7fe fde1 	bl	8001ca8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80030e6:	2101      	movs	r1, #1
 80030e8:	6838      	ldr	r0, [r7, #0]
 80030ea:	f000 fbb3 	bl	8003854 <prvAddCurrentTaskToDelayedList>
}
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20000384 	.word	0x20000384

080030fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10b      	bne.n	800312a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003116:	f383 8811 	msr	BASEPRI, r3
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	60fb      	str	r3, [r7, #12]
}
 8003124:	bf00      	nop
 8003126:	bf00      	nop
 8003128:	e7fd      	b.n	8003126 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	3318      	adds	r3, #24
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe fdf2 	bl	8001d18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003134:	4b1d      	ldr	r3, [pc, #116]	@ (80031ac <xTaskRemoveFromEventList+0xb0>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d11c      	bne.n	8003176 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	3304      	adds	r3, #4
 8003140:	4618      	mov	r0, r3
 8003142:	f7fe fde9 	bl	8001d18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314a:	2201      	movs	r2, #1
 800314c:	409a      	lsls	r2, r3
 800314e:	4b18      	ldr	r3, [pc, #96]	@ (80031b0 <xTaskRemoveFromEventList+0xb4>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4313      	orrs	r3, r2
 8003154:	4a16      	ldr	r2, [pc, #88]	@ (80031b0 <xTaskRemoveFromEventList+0xb4>)
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4a13      	ldr	r2, [pc, #76]	@ (80031b4 <xTaskRemoveFromEventList+0xb8>)
 8003166:	441a      	add	r2, r3
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	3304      	adds	r3, #4
 800316c:	4619      	mov	r1, r3
 800316e:	4610      	mov	r0, r2
 8003170:	f7fe fd77 	bl	8001c62 <vListInsertEnd>
 8003174:	e005      	b.n	8003182 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	3318      	adds	r3, #24
 800317a:	4619      	mov	r1, r3
 800317c:	480e      	ldr	r0, [pc, #56]	@ (80031b8 <xTaskRemoveFromEventList+0xbc>)
 800317e:	f7fe fd70 	bl	8001c62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003186:	4b0d      	ldr	r3, [pc, #52]	@ (80031bc <xTaskRemoveFromEventList+0xc0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318c:	429a      	cmp	r2, r3
 800318e:	d905      	bls.n	800319c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003190:	2301      	movs	r3, #1
 8003192:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003194:	4b0a      	ldr	r3, [pc, #40]	@ (80031c0 <xTaskRemoveFromEventList+0xc4>)
 8003196:	2201      	movs	r2, #1
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	e001      	b.n	80031a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80031a0:	697b      	ldr	r3, [r7, #20]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	200004ac 	.word	0x200004ac
 80031b0:	2000048c 	.word	0x2000048c
 80031b4:	20000388 	.word	0x20000388
 80031b8:	20000444 	.word	0x20000444
 80031bc:	20000384 	.word	0x20000384
 80031c0:	20000498 	.word	0x20000498

080031c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80031cc:	4b06      	ldr	r3, [pc, #24]	@ (80031e8 <vTaskInternalSetTimeOutState+0x24>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80031d4:	4b05      	ldr	r3, [pc, #20]	@ (80031ec <vTaskInternalSetTimeOutState+0x28>)
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	605a      	str	r2, [r3, #4]
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	2000049c 	.word	0x2000049c
 80031ec:	20000488 	.word	0x20000488

080031f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b088      	sub	sp, #32
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10b      	bne.n	8003218 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003204:	f383 8811 	msr	BASEPRI, r3
 8003208:	f3bf 8f6f 	isb	sy
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	613b      	str	r3, [r7, #16]
}
 8003212:	bf00      	nop
 8003214:	bf00      	nop
 8003216:	e7fd      	b.n	8003214 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10b      	bne.n	8003236 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800321e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003222:	f383 8811 	msr	BASEPRI, r3
 8003226:	f3bf 8f6f 	isb	sy
 800322a:	f3bf 8f4f 	dsb	sy
 800322e:	60fb      	str	r3, [r7, #12]
}
 8003230:	bf00      	nop
 8003232:	bf00      	nop
 8003234:	e7fd      	b.n	8003232 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003236:	f000 fc61 	bl	8003afc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800323a:	4b1d      	ldr	r3, [pc, #116]	@ (80032b0 <xTaskCheckForTimeOut+0xc0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003252:	d102      	bne.n	800325a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003254:	2300      	movs	r3, #0
 8003256:	61fb      	str	r3, [r7, #28]
 8003258:	e023      	b.n	80032a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	4b15      	ldr	r3, [pc, #84]	@ (80032b4 <xTaskCheckForTimeOut+0xc4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d007      	beq.n	8003276 <xTaskCheckForTimeOut+0x86>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	429a      	cmp	r2, r3
 800326e:	d302      	bcc.n	8003276 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003270:	2301      	movs	r3, #1
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	e015      	b.n	80032a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	429a      	cmp	r2, r3
 800327e:	d20b      	bcs.n	8003298 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	1ad2      	subs	r2, r2, r3
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7ff ff99 	bl	80031c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
 8003296:	e004      	b.n	80032a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800329e:	2301      	movs	r3, #1
 80032a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80032a2:	f000 fc5b 	bl	8003b5c <vPortExitCritical>

	return xReturn;
 80032a6:	69fb      	ldr	r3, [r7, #28]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3720      	adds	r7, #32
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	20000488 	.word	0x20000488
 80032b4:	2000049c 	.word	0x2000049c

080032b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80032bc:	4b03      	ldr	r3, [pc, #12]	@ (80032cc <vTaskMissedYield+0x14>)
 80032be:	2201      	movs	r2, #1
 80032c0:	601a      	str	r2, [r3, #0]
}
 80032c2:	bf00      	nop
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	20000498 	.word	0x20000498

080032d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80032d8:	f000 f852 	bl	8003380 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80032dc:	4b06      	ldr	r3, [pc, #24]	@ (80032f8 <prvIdleTask+0x28>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d9f9      	bls.n	80032d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80032e4:	4b05      	ldr	r3, [pc, #20]	@ (80032fc <prvIdleTask+0x2c>)
 80032e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80032f4:	e7f0      	b.n	80032d8 <prvIdleTask+0x8>
 80032f6:	bf00      	nop
 80032f8:	20000388 	.word	0x20000388
 80032fc:	e000ed04 	.word	0xe000ed04

08003300 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003306:	2300      	movs	r3, #0
 8003308:	607b      	str	r3, [r7, #4]
 800330a:	e00c      	b.n	8003326 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4a12      	ldr	r2, [pc, #72]	@ (8003360 <prvInitialiseTaskLists+0x60>)
 8003318:	4413      	add	r3, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f7fe fc76 	bl	8001c0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3301      	adds	r3, #1
 8003324:	607b      	str	r3, [r7, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b06      	cmp	r3, #6
 800332a:	d9ef      	bls.n	800330c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800332c:	480d      	ldr	r0, [pc, #52]	@ (8003364 <prvInitialiseTaskLists+0x64>)
 800332e:	f7fe fc6d 	bl	8001c0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003332:	480d      	ldr	r0, [pc, #52]	@ (8003368 <prvInitialiseTaskLists+0x68>)
 8003334:	f7fe fc6a 	bl	8001c0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003338:	480c      	ldr	r0, [pc, #48]	@ (800336c <prvInitialiseTaskLists+0x6c>)
 800333a:	f7fe fc67 	bl	8001c0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800333e:	480c      	ldr	r0, [pc, #48]	@ (8003370 <prvInitialiseTaskLists+0x70>)
 8003340:	f7fe fc64 	bl	8001c0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003344:	480b      	ldr	r0, [pc, #44]	@ (8003374 <prvInitialiseTaskLists+0x74>)
 8003346:	f7fe fc61 	bl	8001c0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800334a:	4b0b      	ldr	r3, [pc, #44]	@ (8003378 <prvInitialiseTaskLists+0x78>)
 800334c:	4a05      	ldr	r2, [pc, #20]	@ (8003364 <prvInitialiseTaskLists+0x64>)
 800334e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003350:	4b0a      	ldr	r3, [pc, #40]	@ (800337c <prvInitialiseTaskLists+0x7c>)
 8003352:	4a05      	ldr	r2, [pc, #20]	@ (8003368 <prvInitialiseTaskLists+0x68>)
 8003354:	601a      	str	r2, [r3, #0]
}
 8003356:	bf00      	nop
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20000388 	.word	0x20000388
 8003364:	20000414 	.word	0x20000414
 8003368:	20000428 	.word	0x20000428
 800336c:	20000444 	.word	0x20000444
 8003370:	20000458 	.word	0x20000458
 8003374:	20000470 	.word	0x20000470
 8003378:	2000043c 	.word	0x2000043c
 800337c:	20000440 	.word	0x20000440

08003380 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003386:	e019      	b.n	80033bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003388:	f000 fbb8 	bl	8003afc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800338c:	4b10      	ldr	r3, [pc, #64]	@ (80033d0 <prvCheckTasksWaitingTermination+0x50>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3304      	adds	r3, #4
 8003398:	4618      	mov	r0, r3
 800339a:	f7fe fcbd 	bl	8001d18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800339e:	4b0d      	ldr	r3, [pc, #52]	@ (80033d4 <prvCheckTasksWaitingTermination+0x54>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	4a0b      	ldr	r2, [pc, #44]	@ (80033d4 <prvCheckTasksWaitingTermination+0x54>)
 80033a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80033a8:	4b0b      	ldr	r3, [pc, #44]	@ (80033d8 <prvCheckTasksWaitingTermination+0x58>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	4a0a      	ldr	r2, [pc, #40]	@ (80033d8 <prvCheckTasksWaitingTermination+0x58>)
 80033b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80033b2:	f000 fbd3 	bl	8003b5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f810 	bl	80033dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033bc:	4b06      	ldr	r3, [pc, #24]	@ (80033d8 <prvCheckTasksWaitingTermination+0x58>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1e1      	bne.n	8003388 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80033c4:	bf00      	nop
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000458 	.word	0x20000458
 80033d4:	20000484 	.word	0x20000484
 80033d8:	2000046c 	.word	0x2000046c

080033dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	334c      	adds	r3, #76	@ 0x4c
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 fe6f 	bl	80040cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d108      	bne.n	800340a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 fd47 	bl	8003e90 <vPortFree>
				vPortFree( pxTCB );
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fd44 	bl	8003e90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003408:	e019      	b.n	800343e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003410:	2b01      	cmp	r3, #1
 8003412:	d103      	bne.n	800341c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 fd3b 	bl	8003e90 <vPortFree>
	}
 800341a:	e010      	b.n	800343e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003422:	2b02      	cmp	r3, #2
 8003424:	d00b      	beq.n	800343e <prvDeleteTCB+0x62>
	__asm volatile
 8003426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800342a:	f383 8811 	msr	BASEPRI, r3
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	f3bf 8f4f 	dsb	sy
 8003436:	60fb      	str	r3, [r7, #12]
}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	e7fd      	b.n	800343a <prvDeleteTCB+0x5e>
	}
 800343e:	bf00      	nop
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800344e:	4b0e      	ldr	r3, [pc, #56]	@ (8003488 <prvResetNextTaskUnblockTime+0x40>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <prvResetNextTaskUnblockTime+0x14>
 8003458:	2301      	movs	r3, #1
 800345a:	e000      	b.n	800345e <prvResetNextTaskUnblockTime+0x16>
 800345c:	2300      	movs	r3, #0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d004      	beq.n	800346c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003462:	4b0a      	ldr	r3, [pc, #40]	@ (800348c <prvResetNextTaskUnblockTime+0x44>)
 8003464:	f04f 32ff 	mov.w	r2, #4294967295
 8003468:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800346a:	e008      	b.n	800347e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800346c:	4b06      	ldr	r3, [pc, #24]	@ (8003488 <prvResetNextTaskUnblockTime+0x40>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4a04      	ldr	r2, [pc, #16]	@ (800348c <prvResetNextTaskUnblockTime+0x44>)
 800347c:	6013      	str	r3, [r2, #0]
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr
 8003488:	2000043c 	.word	0x2000043c
 800348c:	200004a4 	.word	0x200004a4

08003490 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003496:	4b0b      	ldr	r3, [pc, #44]	@ (80034c4 <xTaskGetSchedulerState+0x34>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d102      	bne.n	80034a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800349e:	2301      	movs	r3, #1
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	e008      	b.n	80034b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034a4:	4b08      	ldr	r3, [pc, #32]	@ (80034c8 <xTaskGetSchedulerState+0x38>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d102      	bne.n	80034b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80034ac:	2302      	movs	r3, #2
 80034ae:	607b      	str	r3, [r7, #4]
 80034b0:	e001      	b.n	80034b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80034b2:	2300      	movs	r3, #0
 80034b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80034b6:	687b      	ldr	r3, [r7, #4]
	}
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	bc80      	pop	{r7}
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	20000490 	.word	0x20000490
 80034c8:	200004ac 	.word	0x200004ac

080034cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d06e      	beq.n	80035c0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034e6:	4b39      	ldr	r3, [pc, #228]	@ (80035cc <xTaskPriorityInherit+0x100>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d25e      	bcs.n	80035ae <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	db06      	blt.n	8003506 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034f8:	4b34      	ldr	r3, [pc, #208]	@ (80035cc <xTaskPriorityInherit+0x100>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fe:	f1c3 0207 	rsb	r2, r3, #7
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	6959      	ldr	r1, [r3, #20]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4a2e      	ldr	r2, [pc, #184]	@ (80035d0 <xTaskPriorityInherit+0x104>)
 8003518:	4413      	add	r3, r2
 800351a:	4299      	cmp	r1, r3
 800351c:	d101      	bne.n	8003522 <xTaskPriorityInherit+0x56>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <xTaskPriorityInherit+0x58>
 8003522:	2300      	movs	r3, #0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d03a      	beq.n	800359e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	3304      	adds	r3, #4
 800352c:	4618      	mov	r0, r3
 800352e:	f7fe fbf3 	bl	8001d18 <uxListRemove>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d115      	bne.n	8003564 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800353c:	4924      	ldr	r1, [pc, #144]	@ (80035d0 <xTaskPriorityInherit+0x104>)
 800353e:	4613      	mov	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4413      	add	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10a      	bne.n	8003564 <xTaskPriorityInherit+0x98>
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003552:	2201      	movs	r2, #1
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43da      	mvns	r2, r3
 800355a:	4b1e      	ldr	r3, [pc, #120]	@ (80035d4 <xTaskPriorityInherit+0x108>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4013      	ands	r3, r2
 8003560:	4a1c      	ldr	r2, [pc, #112]	@ (80035d4 <xTaskPriorityInherit+0x108>)
 8003562:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003564:	4b19      	ldr	r3, [pc, #100]	@ (80035cc <xTaskPriorityInherit+0x100>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003572:	2201      	movs	r2, #1
 8003574:	409a      	lsls	r2, r3
 8003576:	4b17      	ldr	r3, [pc, #92]	@ (80035d4 <xTaskPriorityInherit+0x108>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4313      	orrs	r3, r2
 800357c:	4a15      	ldr	r2, [pc, #84]	@ (80035d4 <xTaskPriorityInherit+0x108>)
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4a10      	ldr	r2, [pc, #64]	@ (80035d0 <xTaskPriorityInherit+0x104>)
 800358e:	441a      	add	r2, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	3304      	adds	r3, #4
 8003594:	4619      	mov	r1, r3
 8003596:	4610      	mov	r0, r2
 8003598:	f7fe fb63 	bl	8001c62 <vListInsertEnd>
 800359c:	e004      	b.n	80035a8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800359e:	4b0b      	ldr	r3, [pc, #44]	@ (80035cc <xTaskPriorityInherit+0x100>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80035a8:	2301      	movs	r3, #1
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	e008      	b.n	80035c0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035b2:	4b06      	ldr	r3, [pc, #24]	@ (80035cc <xTaskPriorityInherit+0x100>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d201      	bcs.n	80035c0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80035bc:	2301      	movs	r3, #1
 80035be:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80035c0:	68fb      	ldr	r3, [r7, #12]
	}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000384 	.word	0x20000384
 80035d0:	20000388 	.word	0x20000388
 80035d4:	2000048c 	.word	0x2000048c

080035d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d070      	beq.n	80036d0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80035ee:	4b3b      	ldr	r3, [pc, #236]	@ (80036dc <xTaskPriorityDisinherit+0x104>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d00b      	beq.n	8003610 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80035f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	60fb      	str	r3, [r7, #12]
}
 800360a:	bf00      	nop
 800360c:	bf00      	nop
 800360e:	e7fd      	b.n	800360c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10b      	bne.n	8003630 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	60bb      	str	r3, [r7, #8]
}
 800362a:	bf00      	nop
 800362c:	bf00      	nop
 800362e:	e7fd      	b.n	800362c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003634:	1e5a      	subs	r2, r3, #1
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003642:	429a      	cmp	r2, r3
 8003644:	d044      	beq.n	80036d0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800364a:	2b00      	cmp	r3, #0
 800364c:	d140      	bne.n	80036d0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	3304      	adds	r3, #4
 8003652:	4618      	mov	r0, r3
 8003654:	f7fe fb60 	bl	8001d18 <uxListRemove>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d115      	bne.n	800368a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003662:	491f      	ldr	r1, [pc, #124]	@ (80036e0 <xTaskPriorityDisinherit+0x108>)
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10a      	bne.n	800368a <xTaskPriorityDisinherit+0xb2>
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003678:	2201      	movs	r2, #1
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	43da      	mvns	r2, r3
 8003680:	4b18      	ldr	r3, [pc, #96]	@ (80036e4 <xTaskPriorityDisinherit+0x10c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4013      	ands	r3, r2
 8003686:	4a17      	ldr	r2, [pc, #92]	@ (80036e4 <xTaskPriorityDisinherit+0x10c>)
 8003688:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003696:	f1c3 0207 	rsb	r2, r3, #7
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a2:	2201      	movs	r2, #1
 80036a4:	409a      	lsls	r2, r3
 80036a6:	4b0f      	ldr	r3, [pc, #60]	@ (80036e4 <xTaskPriorityDisinherit+0x10c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	4a0d      	ldr	r2, [pc, #52]	@ (80036e4 <xTaskPriorityDisinherit+0x10c>)
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4a08      	ldr	r2, [pc, #32]	@ (80036e0 <xTaskPriorityDisinherit+0x108>)
 80036be:	441a      	add	r2, r3
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	3304      	adds	r3, #4
 80036c4:	4619      	mov	r1, r3
 80036c6:	4610      	mov	r0, r2
 80036c8:	f7fe facb 	bl	8001c62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80036cc:	2301      	movs	r3, #1
 80036ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80036d0:	697b      	ldr	r3, [r7, #20]
	}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000384 	.word	0x20000384
 80036e0:	20000388 	.word	0x20000388
 80036e4:	2000048c 	.word	0x2000048c

080036e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80036f6:	2301      	movs	r3, #1
 80036f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 808a 	beq.w	8003816 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10b      	bne.n	8003722 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800370a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800370e:	f383 8811 	msr	BASEPRI, r3
 8003712:	f3bf 8f6f 	isb	sy
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	60fb      	str	r3, [r7, #12]
}
 800371c:	bf00      	nop
 800371e:	bf00      	nop
 8003720:	e7fd      	b.n	800371e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d902      	bls.n	8003732 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	61fb      	str	r3, [r7, #28]
 8003730:	e002      	b.n	8003738 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003736:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	429a      	cmp	r2, r3
 8003740:	d069      	beq.n	8003816 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	429a      	cmp	r2, r3
 800374a:	d164      	bne.n	8003816 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800374c:	4b34      	ldr	r3, [pc, #208]	@ (8003820 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	429a      	cmp	r2, r3
 8003754:	d10b      	bne.n	800376e <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 8003756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800375a:	f383 8811 	msr	BASEPRI, r3
 800375e:	f3bf 8f6f 	isb	sy
 8003762:	f3bf 8f4f 	dsb	sy
 8003766:	60bb      	str	r3, [r7, #8]
}
 8003768:	bf00      	nop
 800376a:	bf00      	nop
 800376c:	e7fd      	b.n	800376a <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003772:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	69fa      	ldr	r2, [r7, #28]
 8003778:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	2b00      	cmp	r3, #0
 8003780:	db04      	blt.n	800378c <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f1c3 0207 	rsb	r2, r3, #7
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	6959      	ldr	r1, [r3, #20]
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4a22      	ldr	r2, [pc, #136]	@ (8003824 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800379c:	4413      	add	r3, r2
 800379e:	4299      	cmp	r1, r3
 80037a0:	d101      	bne.n	80037a6 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 80037a6:	2300      	movs	r3, #0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d034      	beq.n	8003816 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	3304      	adds	r3, #4
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fe fab1 	bl	8001d18 <uxListRemove>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d115      	bne.n	80037e8 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037c0:	4918      	ldr	r1, [pc, #96]	@ (8003824 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10a      	bne.n	80037e8 <vTaskPriorityDisinheritAfterTimeout+0x100>
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d6:	2201      	movs	r2, #1
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43da      	mvns	r2, r3
 80037de:	4b12      	ldr	r3, [pc, #72]	@ (8003828 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4013      	ands	r3, r2
 80037e4:	4a10      	ldr	r2, [pc, #64]	@ (8003828 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80037e6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ec:	2201      	movs	r2, #1
 80037ee:	409a      	lsls	r2, r3
 80037f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003828 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003828 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037fe:	4613      	mov	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4413      	add	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4a07      	ldr	r2, [pc, #28]	@ (8003824 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003808:	441a      	add	r2, r3
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	3304      	adds	r3, #4
 800380e:	4619      	mov	r1, r3
 8003810:	4610      	mov	r0, r2
 8003812:	f7fe fa26 	bl	8001c62 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003816:	bf00      	nop
 8003818:	3720      	adds	r7, #32
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20000384 	.word	0x20000384
 8003824:	20000388 	.word	0x20000388
 8003828:	2000048c 	.word	0x2000048c

0800382c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003830:	4b07      	ldr	r3, [pc, #28]	@ (8003850 <pvTaskIncrementMutexHeldCount+0x24>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d004      	beq.n	8003842 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003838:	4b05      	ldr	r3, [pc, #20]	@ (8003850 <pvTaskIncrementMutexHeldCount+0x24>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800383e:	3201      	adds	r2, #1
 8003840:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8003842:	4b03      	ldr	r3, [pc, #12]	@ (8003850 <pvTaskIncrementMutexHeldCount+0x24>)
 8003844:	681b      	ldr	r3, [r3, #0]
	}
 8003846:	4618      	mov	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20000384 	.word	0x20000384

08003854 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800385e:	4b29      	ldr	r3, [pc, #164]	@ (8003904 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003864:	4b28      	ldr	r3, [pc, #160]	@ (8003908 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3304      	adds	r3, #4
 800386a:	4618      	mov	r0, r3
 800386c:	f7fe fa54 	bl	8001d18 <uxListRemove>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10b      	bne.n	800388e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003876:	4b24      	ldr	r3, [pc, #144]	@ (8003908 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387c:	2201      	movs	r2, #1
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43da      	mvns	r2, r3
 8003884:	4b21      	ldr	r3, [pc, #132]	@ (800390c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4013      	ands	r3, r2
 800388a:	4a20      	ldr	r2, [pc, #128]	@ (800390c <prvAddCurrentTaskToDelayedList+0xb8>)
 800388c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003894:	d10a      	bne.n	80038ac <prvAddCurrentTaskToDelayedList+0x58>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d007      	beq.n	80038ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800389c:	4b1a      	ldr	r3, [pc, #104]	@ (8003908 <prvAddCurrentTaskToDelayedList+0xb4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3304      	adds	r3, #4
 80038a2:	4619      	mov	r1, r3
 80038a4:	481a      	ldr	r0, [pc, #104]	@ (8003910 <prvAddCurrentTaskToDelayedList+0xbc>)
 80038a6:	f7fe f9dc 	bl	8001c62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80038aa:	e026      	b.n	80038fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4413      	add	r3, r2
 80038b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038b4:	4b14      	ldr	r3, [pc, #80]	@ (8003908 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d209      	bcs.n	80038d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038c4:	4b13      	ldr	r3, [pc, #76]	@ (8003914 <prvAddCurrentTaskToDelayedList+0xc0>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003908 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3304      	adds	r3, #4
 80038ce:	4619      	mov	r1, r3
 80038d0:	4610      	mov	r0, r2
 80038d2:	f7fe f9e9 	bl	8001ca8 <vListInsert>
}
 80038d6:	e010      	b.n	80038fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003918 <prvAddCurrentTaskToDelayedList+0xc4>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003908 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3304      	adds	r3, #4
 80038e2:	4619      	mov	r1, r3
 80038e4:	4610      	mov	r0, r2
 80038e6:	f7fe f9df 	bl	8001ca8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80038ea:	4b0c      	ldr	r3, [pc, #48]	@ (800391c <prvAddCurrentTaskToDelayedList+0xc8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d202      	bcs.n	80038fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80038f4:	4a09      	ldr	r2, [pc, #36]	@ (800391c <prvAddCurrentTaskToDelayedList+0xc8>)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	6013      	str	r3, [r2, #0]
}
 80038fa:	bf00      	nop
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000488 	.word	0x20000488
 8003908:	20000384 	.word	0x20000384
 800390c:	2000048c 	.word	0x2000048c
 8003910:	20000470 	.word	0x20000470
 8003914:	20000440 	.word	0x20000440
 8003918:	2000043c 	.word	0x2000043c
 800391c:	200004a4 	.word	0x200004a4

08003920 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	3b04      	subs	r3, #4
 8003930:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003938:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	3b04      	subs	r3, #4
 800393e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f023 0201 	bic.w	r2, r3, #1
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	3b04      	subs	r3, #4
 800394e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003950:	4a08      	ldr	r2, [pc, #32]	@ (8003974 <pxPortInitialiseStack+0x54>)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	3b14      	subs	r3, #20
 800395a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3b20      	subs	r3, #32
 8003966:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003968:	68fb      	ldr	r3, [r7, #12]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr
 8003974:	08003979 	.word	0x08003979

08003978 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800397e:	2300      	movs	r3, #0
 8003980:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003982:	4b12      	ldr	r3, [pc, #72]	@ (80039cc <prvTaskExitError+0x54>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398a:	d00b      	beq.n	80039a4 <prvTaskExitError+0x2c>
	__asm volatile
 800398c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003990:	f383 8811 	msr	BASEPRI, r3
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	60fb      	str	r3, [r7, #12]
}
 800399e:	bf00      	nop
 80039a0:	bf00      	nop
 80039a2:	e7fd      	b.n	80039a0 <prvTaskExitError+0x28>
	__asm volatile
 80039a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a8:	f383 8811 	msr	BASEPRI, r3
 80039ac:	f3bf 8f6f 	isb	sy
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	60bb      	str	r3, [r7, #8]
}
 80039b6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80039b8:	bf00      	nop
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0fc      	beq.n	80039ba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80039c0:	bf00      	nop
 80039c2:	bf00      	nop
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bc80      	pop	{r7}
 80039ca:	4770      	bx	lr
 80039cc:	20000010 	.word	0x20000010

080039d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80039d0:	4b07      	ldr	r3, [pc, #28]	@ (80039f0 <pxCurrentTCBConst2>)
 80039d2:	6819      	ldr	r1, [r3, #0]
 80039d4:	6808      	ldr	r0, [r1, #0]
 80039d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80039da:	f380 8809 	msr	PSP, r0
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f04f 0000 	mov.w	r0, #0
 80039e6:	f380 8811 	msr	BASEPRI, r0
 80039ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80039ee:	4770      	bx	lr

080039f0 <pxCurrentTCBConst2>:
 80039f0:	20000384 	.word	0x20000384
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80039f4:	bf00      	nop
 80039f6:	bf00      	nop

080039f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80039f8:	4806      	ldr	r0, [pc, #24]	@ (8003a14 <prvPortStartFirstTask+0x1c>)
 80039fa:	6800      	ldr	r0, [r0, #0]
 80039fc:	6800      	ldr	r0, [r0, #0]
 80039fe:	f380 8808 	msr	MSP, r0
 8003a02:	b662      	cpsie	i
 8003a04:	b661      	cpsie	f
 8003a06:	f3bf 8f4f 	dsb	sy
 8003a0a:	f3bf 8f6f 	isb	sy
 8003a0e:	df00      	svc	0
 8003a10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003a12:	bf00      	nop
 8003a14:	e000ed08 	.word	0xe000ed08

08003a18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a1e:	4b32      	ldr	r3, [pc, #200]	@ (8003ae8 <xPortStartScheduler+0xd0>)
 8003a20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	22ff      	movs	r2, #255	@ 0xff
 8003a2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a38:	78fb      	ldrb	r3, [r7, #3]
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	4b2a      	ldr	r3, [pc, #168]	@ (8003aec <xPortStartScheduler+0xd4>)
 8003a44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a46:	4b2a      	ldr	r3, [pc, #168]	@ (8003af0 <xPortStartScheduler+0xd8>)
 8003a48:	2207      	movs	r2, #7
 8003a4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a4c:	e009      	b.n	8003a62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003a4e:	4b28      	ldr	r3, [pc, #160]	@ (8003af0 <xPortStartScheduler+0xd8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	4a26      	ldr	r2, [pc, #152]	@ (8003af0 <xPortStartScheduler+0xd8>)
 8003a56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6a:	2b80      	cmp	r3, #128	@ 0x80
 8003a6c:	d0ef      	beq.n	8003a4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a6e:	4b20      	ldr	r3, [pc, #128]	@ (8003af0 <xPortStartScheduler+0xd8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f1c3 0307 	rsb	r3, r3, #7
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d00b      	beq.n	8003a92 <xPortStartScheduler+0x7a>
	__asm volatile
 8003a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a7e:	f383 8811 	msr	BASEPRI, r3
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	60bb      	str	r3, [r7, #8]
}
 8003a8c:	bf00      	nop
 8003a8e:	bf00      	nop
 8003a90:	e7fd      	b.n	8003a8e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a92:	4b17      	ldr	r3, [pc, #92]	@ (8003af0 <xPortStartScheduler+0xd8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	4a15      	ldr	r2, [pc, #84]	@ (8003af0 <xPortStartScheduler+0xd8>)
 8003a9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a9c:	4b14      	ldr	r3, [pc, #80]	@ (8003af0 <xPortStartScheduler+0xd8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003aa4:	4a12      	ldr	r2, [pc, #72]	@ (8003af0 <xPortStartScheduler+0xd8>)
 8003aa6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003ab0:	4b10      	ldr	r3, [pc, #64]	@ (8003af4 <xPortStartScheduler+0xdc>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a0f      	ldr	r2, [pc, #60]	@ (8003af4 <xPortStartScheduler+0xdc>)
 8003ab6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003aba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003abc:	4b0d      	ldr	r3, [pc, #52]	@ (8003af4 <xPortStartScheduler+0xdc>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a0c      	ldr	r2, [pc, #48]	@ (8003af4 <xPortStartScheduler+0xdc>)
 8003ac2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003ac6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003ac8:	f000 f8b8 	bl	8003c3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003acc:	4b0a      	ldr	r3, [pc, #40]	@ (8003af8 <xPortStartScheduler+0xe0>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003ad2:	f7ff ff91 	bl	80039f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ad6:	f7ff fa89 	bl	8002fec <vTaskSwitchContext>
	prvTaskExitError();
 8003ada:	f7ff ff4d 	bl	8003978 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	e000e400 	.word	0xe000e400
 8003aec:	200004b0 	.word	0x200004b0
 8003af0:	200004b4 	.word	0x200004b4
 8003af4:	e000ed20 	.word	0xe000ed20
 8003af8:	20000010 	.word	0x20000010

08003afc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
	__asm volatile
 8003b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	607b      	str	r3, [r7, #4]
}
 8003b14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003b16:	4b0f      	ldr	r3, [pc, #60]	@ (8003b54 <vPortEnterCritical+0x58>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b54 <vPortEnterCritical+0x58>)
 8003b1e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003b20:	4b0c      	ldr	r3, [pc, #48]	@ (8003b54 <vPortEnterCritical+0x58>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d110      	bne.n	8003b4a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003b28:	4b0b      	ldr	r3, [pc, #44]	@ (8003b58 <vPortEnterCritical+0x5c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00b      	beq.n	8003b4a <vPortEnterCritical+0x4e>
	__asm volatile
 8003b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b36:	f383 8811 	msr	BASEPRI, r3
 8003b3a:	f3bf 8f6f 	isb	sy
 8003b3e:	f3bf 8f4f 	dsb	sy
 8003b42:	603b      	str	r3, [r7, #0]
}
 8003b44:	bf00      	nop
 8003b46:	bf00      	nop
 8003b48:	e7fd      	b.n	8003b46 <vPortEnterCritical+0x4a>
	}
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr
 8003b54:	20000010 	.word	0x20000010
 8003b58:	e000ed04 	.word	0xe000ed04

08003b5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003b62:	4b12      	ldr	r3, [pc, #72]	@ (8003bac <vPortExitCritical+0x50>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10b      	bne.n	8003b82 <vPortExitCritical+0x26>
	__asm volatile
 8003b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b6e:	f383 8811 	msr	BASEPRI, r3
 8003b72:	f3bf 8f6f 	isb	sy
 8003b76:	f3bf 8f4f 	dsb	sy
 8003b7a:	607b      	str	r3, [r7, #4]
}
 8003b7c:	bf00      	nop
 8003b7e:	bf00      	nop
 8003b80:	e7fd      	b.n	8003b7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003b82:	4b0a      	ldr	r3, [pc, #40]	@ (8003bac <vPortExitCritical+0x50>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	4a08      	ldr	r2, [pc, #32]	@ (8003bac <vPortExitCritical+0x50>)
 8003b8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b8c:	4b07      	ldr	r3, [pc, #28]	@ (8003bac <vPortExitCritical+0x50>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d105      	bne.n	8003ba0 <vPortExitCritical+0x44>
 8003b94:	2300      	movs	r3, #0
 8003b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	f383 8811 	msr	BASEPRI, r3
}
 8003b9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bc80      	pop	{r7}
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	20000010 	.word	0x20000010

08003bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003bb0:	f3ef 8009 	mrs	r0, PSP
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf0 <pxCurrentTCBConst>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003bc0:	6010      	str	r0, [r2, #0]
 8003bc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003bc6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003bca:	f380 8811 	msr	BASEPRI, r0
 8003bce:	f7ff fa0d 	bl	8002fec <vTaskSwitchContext>
 8003bd2:	f04f 0000 	mov.w	r0, #0
 8003bd6:	f380 8811 	msr	BASEPRI, r0
 8003bda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003bde:	6819      	ldr	r1, [r3, #0]
 8003be0:	6808      	ldr	r0, [r1, #0]
 8003be2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003be6:	f380 8809 	msr	PSP, r0
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	4770      	bx	lr

08003bf0 <pxCurrentTCBConst>:
 8003bf0:	20000384 	.word	0x20000384
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003bf4:	bf00      	nop
 8003bf6:	bf00      	nop

08003bf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
	__asm volatile
 8003bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c02:	f383 8811 	msr	BASEPRI, r3
 8003c06:	f3bf 8f6f 	isb	sy
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	607b      	str	r3, [r7, #4]
}
 8003c10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003c12:	f7ff f92d 	bl	8002e70 <xTaskIncrementTick>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003c1c:	4b06      	ldr	r3, [pc, #24]	@ (8003c38 <SysTick_Handler+0x40>)
 8003c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	2300      	movs	r3, #0
 8003c26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	f383 8811 	msr	BASEPRI, r3
}
 8003c2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003c30:	bf00      	nop
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	e000ed04 	.word	0xe000ed04

08003c3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c40:	4b0a      	ldr	r3, [pc, #40]	@ (8003c6c <vPortSetupTimerInterrupt+0x30>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c46:	4b0a      	ldr	r3, [pc, #40]	@ (8003c70 <vPortSetupTimerInterrupt+0x34>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c4c:	4b09      	ldr	r3, [pc, #36]	@ (8003c74 <vPortSetupTimerInterrupt+0x38>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a09      	ldr	r2, [pc, #36]	@ (8003c78 <vPortSetupTimerInterrupt+0x3c>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	099b      	lsrs	r3, r3, #6
 8003c58:	4a08      	ldr	r2, [pc, #32]	@ (8003c7c <vPortSetupTimerInterrupt+0x40>)
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c5e:	4b03      	ldr	r3, [pc, #12]	@ (8003c6c <vPortSetupTimerInterrupt+0x30>)
 8003c60:	2207      	movs	r2, #7
 8003c62:	601a      	str	r2, [r3, #0]
}
 8003c64:	bf00      	nop
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr
 8003c6c:	e000e010 	.word	0xe000e010
 8003c70:	e000e018 	.word	0xe000e018
 8003c74:	20000004 	.word	0x20000004
 8003c78:	10624dd3 	.word	0x10624dd3
 8003c7c:	e000e014 	.word	0xe000e014

08003c80 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003c86:	f3ef 8305 	mrs	r3, IPSR
 8003c8a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b0f      	cmp	r3, #15
 8003c90:	d915      	bls.n	8003cbe <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003c92:	4a17      	ldr	r2, [pc, #92]	@ (8003cf0 <vPortValidateInterruptPriority+0x70>)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4413      	add	r3, r2
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003c9c:	4b15      	ldr	r3, [pc, #84]	@ (8003cf4 <vPortValidateInterruptPriority+0x74>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	7afa      	ldrb	r2, [r7, #11]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d20b      	bcs.n	8003cbe <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003caa:	f383 8811 	msr	BASEPRI, r3
 8003cae:	f3bf 8f6f 	isb	sy
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	607b      	str	r3, [r7, #4]
}
 8003cb8:	bf00      	nop
 8003cba:	bf00      	nop
 8003cbc:	e7fd      	b.n	8003cba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf8 <vPortValidateInterruptPriority+0x78>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8003cfc <vPortValidateInterruptPriority+0x7c>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d90b      	bls.n	8003ce6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	603b      	str	r3, [r7, #0]
}
 8003ce0:	bf00      	nop
 8003ce2:	bf00      	nop
 8003ce4:	e7fd      	b.n	8003ce2 <vPortValidateInterruptPriority+0x62>
	}
 8003ce6:	bf00      	nop
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bc80      	pop	{r7}
 8003cee:	4770      	bx	lr
 8003cf0:	e000e3f0 	.word	0xe000e3f0
 8003cf4:	200004b0 	.word	0x200004b0
 8003cf8:	e000ed0c 	.word	0xe000ed0c
 8003cfc:	200004b4 	.word	0x200004b4

08003d00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08a      	sub	sp, #40	@ 0x28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003d0c:	f7ff f804 	bl	8002d18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003d10:	4b5a      	ldr	r3, [pc, #360]	@ (8003e7c <pvPortMalloc+0x17c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003d18:	f000 f916 	bl	8003f48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003d1c:	4b58      	ldr	r3, [pc, #352]	@ (8003e80 <pvPortMalloc+0x180>)
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4013      	ands	r3, r2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f040 8090 	bne.w	8003e4a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d01e      	beq.n	8003d6e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003d30:	2208      	movs	r2, #8
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4413      	add	r3, r2
 8003d36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d015      	beq.n	8003d6e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f023 0307 	bic.w	r3, r3, #7
 8003d48:	3308      	adds	r3, #8
 8003d4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00b      	beq.n	8003d6e <pvPortMalloc+0x6e>
	__asm volatile
 8003d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	617b      	str	r3, [r7, #20]
}
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
 8003d6c:	e7fd      	b.n	8003d6a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d06a      	beq.n	8003e4a <pvPortMalloc+0x14a>
 8003d74:	4b43      	ldr	r3, [pc, #268]	@ (8003e84 <pvPortMalloc+0x184>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d865      	bhi.n	8003e4a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003d7e:	4b42      	ldr	r3, [pc, #264]	@ (8003e88 <pvPortMalloc+0x188>)
 8003d80:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003d82:	4b41      	ldr	r3, [pc, #260]	@ (8003e88 <pvPortMalloc+0x188>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d88:	e004      	b.n	8003d94 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d903      	bls.n	8003da6 <pvPortMalloc+0xa6>
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f1      	bne.n	8003d8a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003da6:	4b35      	ldr	r3, [pc, #212]	@ (8003e7c <pvPortMalloc+0x17c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d04c      	beq.n	8003e4a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2208      	movs	r2, #8
 8003db6:	4413      	add	r3, r2
 8003db8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	1ad2      	subs	r2, r2, r3
 8003dca:	2308      	movs	r3, #8
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d920      	bls.n	8003e14 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00b      	beq.n	8003dfc <pvPortMalloc+0xfc>
	__asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	613b      	str	r3, [r7, #16]
}
 8003df6:	bf00      	nop
 8003df8:	bf00      	nop
 8003dfa:	e7fd      	b.n	8003df8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	1ad2      	subs	r2, r2, r3
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003e0e:	69b8      	ldr	r0, [r7, #24]
 8003e10:	f000 f8fc 	bl	800400c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003e14:	4b1b      	ldr	r3, [pc, #108]	@ (8003e84 <pvPortMalloc+0x184>)
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	4a19      	ldr	r2, [pc, #100]	@ (8003e84 <pvPortMalloc+0x184>)
 8003e20:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003e22:	4b18      	ldr	r3, [pc, #96]	@ (8003e84 <pvPortMalloc+0x184>)
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	4b19      	ldr	r3, [pc, #100]	@ (8003e8c <pvPortMalloc+0x18c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d203      	bcs.n	8003e36 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003e2e:	4b15      	ldr	r3, [pc, #84]	@ (8003e84 <pvPortMalloc+0x184>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a16      	ldr	r2, [pc, #88]	@ (8003e8c <pvPortMalloc+0x18c>)
 8003e34:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	4b11      	ldr	r3, [pc, #68]	@ (8003e80 <pvPortMalloc+0x180>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e42:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003e4a:	f7fe ff73 	bl	8002d34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00b      	beq.n	8003e70 <pvPortMalloc+0x170>
	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	60fb      	str	r3, [r7, #12]
}
 8003e6a:	bf00      	nop
 8003e6c:	bf00      	nop
 8003e6e:	e7fd      	b.n	8003e6c <pvPortMalloc+0x16c>
	return pvReturn;
 8003e70:	69fb      	ldr	r3, [r7, #28]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3728      	adds	r7, #40	@ 0x28
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	200010c0 	.word	0x200010c0
 8003e80:	200010cc 	.word	0x200010cc
 8003e84:	200010c4 	.word	0x200010c4
 8003e88:	200010b8 	.word	0x200010b8
 8003e8c:	200010c8 	.word	0x200010c8

08003e90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d04a      	beq.n	8003f38 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003ea2:	2308      	movs	r3, #8
 8003ea4:	425b      	negs	r3, r3
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	4b22      	ldr	r3, [pc, #136]	@ (8003f40 <vPortFree+0xb0>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10b      	bne.n	8003ed6 <vPortFree+0x46>
	__asm volatile
 8003ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec2:	f383 8811 	msr	BASEPRI, r3
 8003ec6:	f3bf 8f6f 	isb	sy
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	60fb      	str	r3, [r7, #12]
}
 8003ed0:	bf00      	nop
 8003ed2:	bf00      	nop
 8003ed4:	e7fd      	b.n	8003ed2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00b      	beq.n	8003ef6 <vPortFree+0x66>
	__asm volatile
 8003ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	60bb      	str	r3, [r7, #8]
}
 8003ef0:	bf00      	nop
 8003ef2:	bf00      	nop
 8003ef4:	e7fd      	b.n	8003ef2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	4b11      	ldr	r3, [pc, #68]	@ (8003f40 <vPortFree+0xb0>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4013      	ands	r3, r2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d019      	beq.n	8003f38 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d115      	bne.n	8003f38 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	4b0b      	ldr	r3, [pc, #44]	@ (8003f40 <vPortFree+0xb0>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	43db      	mvns	r3, r3
 8003f16:	401a      	ands	r2, r3
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003f1c:	f7fe fefc 	bl	8002d18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	4b07      	ldr	r3, [pc, #28]	@ (8003f44 <vPortFree+0xb4>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4413      	add	r3, r2
 8003f2a:	4a06      	ldr	r2, [pc, #24]	@ (8003f44 <vPortFree+0xb4>)
 8003f2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003f2e:	6938      	ldr	r0, [r7, #16]
 8003f30:	f000 f86c 	bl	800400c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003f34:	f7fe fefe 	bl	8002d34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003f38:	bf00      	nop
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	200010cc 	.word	0x200010cc
 8003f44:	200010c4 	.word	0x200010c4

08003f48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003f4e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003f52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003f54:	4b27      	ldr	r3, [pc, #156]	@ (8003ff4 <prvHeapInit+0xac>)
 8003f56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00c      	beq.n	8003f7c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	3307      	adds	r3, #7
 8003f66:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f023 0307 	bic.w	r3, r3, #7
 8003f6e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	4a1f      	ldr	r2, [pc, #124]	@ (8003ff4 <prvHeapInit+0xac>)
 8003f78:	4413      	add	r3, r2
 8003f7a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f80:	4a1d      	ldr	r2, [pc, #116]	@ (8003ff8 <prvHeapInit+0xb0>)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003f86:	4b1c      	ldr	r3, [pc, #112]	@ (8003ff8 <prvHeapInit+0xb0>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	4413      	add	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003f94:	2208      	movs	r2, #8
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	1a9b      	subs	r3, r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0307 	bic.w	r3, r3, #7
 8003fa2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4a15      	ldr	r2, [pc, #84]	@ (8003ffc <prvHeapInit+0xb4>)
 8003fa8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003faa:	4b14      	ldr	r3, [pc, #80]	@ (8003ffc <prvHeapInit+0xb4>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003fb2:	4b12      	ldr	r3, [pc, #72]	@ (8003ffc <prvHeapInit+0xb4>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	1ad2      	subs	r2, r2, r3
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003ffc <prvHeapInit+0xb4>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8004000 <prvHeapInit+0xb8>)
 8003fd6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	4a09      	ldr	r2, [pc, #36]	@ (8004004 <prvHeapInit+0xbc>)
 8003fde:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003fe0:	4b09      	ldr	r3, [pc, #36]	@ (8004008 <prvHeapInit+0xc0>)
 8003fe2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003fe6:	601a      	str	r2, [r3, #0]
}
 8003fe8:	bf00      	nop
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	200004b8 	.word	0x200004b8
 8003ff8:	200010b8 	.word	0x200010b8
 8003ffc:	200010c0 	.word	0x200010c0
 8004000:	200010c8 	.word	0x200010c8
 8004004:	200010c4 	.word	0x200010c4
 8004008:	200010cc 	.word	0x200010cc

0800400c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004014:	4b27      	ldr	r3, [pc, #156]	@ (80040b4 <prvInsertBlockIntoFreeList+0xa8>)
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	e002      	b.n	8004020 <prvInsertBlockIntoFreeList+0x14>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	429a      	cmp	r2, r3
 8004028:	d8f7      	bhi.n	800401a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	4413      	add	r3, r2
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	429a      	cmp	r2, r3
 800403a:	d108      	bne.n	800404e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	441a      	add	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	441a      	add	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d118      	bne.n	8004094 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	4b14      	ldr	r3, [pc, #80]	@ (80040b8 <prvInsertBlockIntoFreeList+0xac>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d00d      	beq.n	800408a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	441a      	add	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	e008      	b.n	800409c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800408a:	4b0b      	ldr	r3, [pc, #44]	@ (80040b8 <prvInsertBlockIntoFreeList+0xac>)
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	e003      	b.n	800409c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d002      	beq.n	80040aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040aa:	bf00      	nop
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr
 80040b4:	200010b8 	.word	0x200010b8
 80040b8:	200010c0 	.word	0x200010c0

080040bc <memset>:
 80040bc:	4603      	mov	r3, r0
 80040be:	4402      	add	r2, r0
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d100      	bne.n	80040c6 <memset+0xa>
 80040c4:	4770      	bx	lr
 80040c6:	f803 1b01 	strb.w	r1, [r3], #1
 80040ca:	e7f9      	b.n	80040c0 <memset+0x4>

080040cc <_reclaim_reent>:
 80040cc:	4b29      	ldr	r3, [pc, #164]	@ (8004174 <_reclaim_reent+0xa8>)
 80040ce:	b570      	push	{r4, r5, r6, lr}
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4604      	mov	r4, r0
 80040d4:	4283      	cmp	r3, r0
 80040d6:	d04b      	beq.n	8004170 <_reclaim_reent+0xa4>
 80040d8:	69c3      	ldr	r3, [r0, #28]
 80040da:	b1ab      	cbz	r3, 8004108 <_reclaim_reent+0x3c>
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	b16b      	cbz	r3, 80040fc <_reclaim_reent+0x30>
 80040e0:	2500      	movs	r5, #0
 80040e2:	69e3      	ldr	r3, [r4, #28]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	5959      	ldr	r1, [r3, r5]
 80040e8:	2900      	cmp	r1, #0
 80040ea:	d13b      	bne.n	8004164 <_reclaim_reent+0x98>
 80040ec:	3504      	adds	r5, #4
 80040ee:	2d80      	cmp	r5, #128	@ 0x80
 80040f0:	d1f7      	bne.n	80040e2 <_reclaim_reent+0x16>
 80040f2:	69e3      	ldr	r3, [r4, #28]
 80040f4:	4620      	mov	r0, r4
 80040f6:	68d9      	ldr	r1, [r3, #12]
 80040f8:	f000 f872 	bl	80041e0 <_free_r>
 80040fc:	69e3      	ldr	r3, [r4, #28]
 80040fe:	6819      	ldr	r1, [r3, #0]
 8004100:	b111      	cbz	r1, 8004108 <_reclaim_reent+0x3c>
 8004102:	4620      	mov	r0, r4
 8004104:	f000 f86c 	bl	80041e0 <_free_r>
 8004108:	6961      	ldr	r1, [r4, #20]
 800410a:	b111      	cbz	r1, 8004112 <_reclaim_reent+0x46>
 800410c:	4620      	mov	r0, r4
 800410e:	f000 f867 	bl	80041e0 <_free_r>
 8004112:	69e1      	ldr	r1, [r4, #28]
 8004114:	b111      	cbz	r1, 800411c <_reclaim_reent+0x50>
 8004116:	4620      	mov	r0, r4
 8004118:	f000 f862 	bl	80041e0 <_free_r>
 800411c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800411e:	b111      	cbz	r1, 8004126 <_reclaim_reent+0x5a>
 8004120:	4620      	mov	r0, r4
 8004122:	f000 f85d 	bl	80041e0 <_free_r>
 8004126:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004128:	b111      	cbz	r1, 8004130 <_reclaim_reent+0x64>
 800412a:	4620      	mov	r0, r4
 800412c:	f000 f858 	bl	80041e0 <_free_r>
 8004130:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004132:	b111      	cbz	r1, 800413a <_reclaim_reent+0x6e>
 8004134:	4620      	mov	r0, r4
 8004136:	f000 f853 	bl	80041e0 <_free_r>
 800413a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800413c:	b111      	cbz	r1, 8004144 <_reclaim_reent+0x78>
 800413e:	4620      	mov	r0, r4
 8004140:	f000 f84e 	bl	80041e0 <_free_r>
 8004144:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004146:	b111      	cbz	r1, 800414e <_reclaim_reent+0x82>
 8004148:	4620      	mov	r0, r4
 800414a:	f000 f849 	bl	80041e0 <_free_r>
 800414e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004150:	b111      	cbz	r1, 8004158 <_reclaim_reent+0x8c>
 8004152:	4620      	mov	r0, r4
 8004154:	f000 f844 	bl	80041e0 <_free_r>
 8004158:	6a23      	ldr	r3, [r4, #32]
 800415a:	b14b      	cbz	r3, 8004170 <_reclaim_reent+0xa4>
 800415c:	4620      	mov	r0, r4
 800415e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004162:	4718      	bx	r3
 8004164:	680e      	ldr	r6, [r1, #0]
 8004166:	4620      	mov	r0, r4
 8004168:	f000 f83a 	bl	80041e0 <_free_r>
 800416c:	4631      	mov	r1, r6
 800416e:	e7bb      	b.n	80040e8 <_reclaim_reent+0x1c>
 8004170:	bd70      	pop	{r4, r5, r6, pc}
 8004172:	bf00      	nop
 8004174:	20000014 	.word	0x20000014

08004178 <__libc_init_array>:
 8004178:	b570      	push	{r4, r5, r6, lr}
 800417a:	2600      	movs	r6, #0
 800417c:	4d0c      	ldr	r5, [pc, #48]	@ (80041b0 <__libc_init_array+0x38>)
 800417e:	4c0d      	ldr	r4, [pc, #52]	@ (80041b4 <__libc_init_array+0x3c>)
 8004180:	1b64      	subs	r4, r4, r5
 8004182:	10a4      	asrs	r4, r4, #2
 8004184:	42a6      	cmp	r6, r4
 8004186:	d109      	bne.n	800419c <__libc_init_array+0x24>
 8004188:	f000 f87e 	bl	8004288 <_init>
 800418c:	2600      	movs	r6, #0
 800418e:	4d0a      	ldr	r5, [pc, #40]	@ (80041b8 <__libc_init_array+0x40>)
 8004190:	4c0a      	ldr	r4, [pc, #40]	@ (80041bc <__libc_init_array+0x44>)
 8004192:	1b64      	subs	r4, r4, r5
 8004194:	10a4      	asrs	r4, r4, #2
 8004196:	42a6      	cmp	r6, r4
 8004198:	d105      	bne.n	80041a6 <__libc_init_array+0x2e>
 800419a:	bd70      	pop	{r4, r5, r6, pc}
 800419c:	f855 3b04 	ldr.w	r3, [r5], #4
 80041a0:	4798      	blx	r3
 80041a2:	3601      	adds	r6, #1
 80041a4:	e7ee      	b.n	8004184 <__libc_init_array+0xc>
 80041a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041aa:	4798      	blx	r3
 80041ac:	3601      	adds	r6, #1
 80041ae:	e7f2      	b.n	8004196 <__libc_init_array+0x1e>
 80041b0:	0800437c 	.word	0x0800437c
 80041b4:	0800437c 	.word	0x0800437c
 80041b8:	0800437c 	.word	0x0800437c
 80041bc:	08004380 	.word	0x08004380

080041c0 <__retarget_lock_acquire_recursive>:
 80041c0:	4770      	bx	lr

080041c2 <__retarget_lock_release_recursive>:
 80041c2:	4770      	bx	lr

080041c4 <memcpy>:
 80041c4:	440a      	add	r2, r1
 80041c6:	4291      	cmp	r1, r2
 80041c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80041cc:	d100      	bne.n	80041d0 <memcpy+0xc>
 80041ce:	4770      	bx	lr
 80041d0:	b510      	push	{r4, lr}
 80041d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041d6:	4291      	cmp	r1, r2
 80041d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041dc:	d1f9      	bne.n	80041d2 <memcpy+0xe>
 80041de:	bd10      	pop	{r4, pc}

080041e0 <_free_r>:
 80041e0:	b538      	push	{r3, r4, r5, lr}
 80041e2:	4605      	mov	r5, r0
 80041e4:	2900      	cmp	r1, #0
 80041e6:	d040      	beq.n	800426a <_free_r+0x8a>
 80041e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041ec:	1f0c      	subs	r4, r1, #4
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	bfb8      	it	lt
 80041f2:	18e4      	addlt	r4, r4, r3
 80041f4:	f000 f83c 	bl	8004270 <__malloc_lock>
 80041f8:	4a1c      	ldr	r2, [pc, #112]	@ (800426c <_free_r+0x8c>)
 80041fa:	6813      	ldr	r3, [r2, #0]
 80041fc:	b933      	cbnz	r3, 800420c <_free_r+0x2c>
 80041fe:	6063      	str	r3, [r4, #4]
 8004200:	6014      	str	r4, [r2, #0]
 8004202:	4628      	mov	r0, r5
 8004204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004208:	f000 b838 	b.w	800427c <__malloc_unlock>
 800420c:	42a3      	cmp	r3, r4
 800420e:	d908      	bls.n	8004222 <_free_r+0x42>
 8004210:	6820      	ldr	r0, [r4, #0]
 8004212:	1821      	adds	r1, r4, r0
 8004214:	428b      	cmp	r3, r1
 8004216:	bf01      	itttt	eq
 8004218:	6819      	ldreq	r1, [r3, #0]
 800421a:	685b      	ldreq	r3, [r3, #4]
 800421c:	1809      	addeq	r1, r1, r0
 800421e:	6021      	streq	r1, [r4, #0]
 8004220:	e7ed      	b.n	80041fe <_free_r+0x1e>
 8004222:	461a      	mov	r2, r3
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	b10b      	cbz	r3, 800422c <_free_r+0x4c>
 8004228:	42a3      	cmp	r3, r4
 800422a:	d9fa      	bls.n	8004222 <_free_r+0x42>
 800422c:	6811      	ldr	r1, [r2, #0]
 800422e:	1850      	adds	r0, r2, r1
 8004230:	42a0      	cmp	r0, r4
 8004232:	d10b      	bne.n	800424c <_free_r+0x6c>
 8004234:	6820      	ldr	r0, [r4, #0]
 8004236:	4401      	add	r1, r0
 8004238:	1850      	adds	r0, r2, r1
 800423a:	4283      	cmp	r3, r0
 800423c:	6011      	str	r1, [r2, #0]
 800423e:	d1e0      	bne.n	8004202 <_free_r+0x22>
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	4408      	add	r0, r1
 8004246:	6010      	str	r0, [r2, #0]
 8004248:	6053      	str	r3, [r2, #4]
 800424a:	e7da      	b.n	8004202 <_free_r+0x22>
 800424c:	d902      	bls.n	8004254 <_free_r+0x74>
 800424e:	230c      	movs	r3, #12
 8004250:	602b      	str	r3, [r5, #0]
 8004252:	e7d6      	b.n	8004202 <_free_r+0x22>
 8004254:	6820      	ldr	r0, [r4, #0]
 8004256:	1821      	adds	r1, r4, r0
 8004258:	428b      	cmp	r3, r1
 800425a:	bf01      	itttt	eq
 800425c:	6819      	ldreq	r1, [r3, #0]
 800425e:	685b      	ldreq	r3, [r3, #4]
 8004260:	1809      	addeq	r1, r1, r0
 8004262:	6021      	streq	r1, [r4, #0]
 8004264:	6063      	str	r3, [r4, #4]
 8004266:	6054      	str	r4, [r2, #4]
 8004268:	e7cb      	b.n	8004202 <_free_r+0x22>
 800426a:	bd38      	pop	{r3, r4, r5, pc}
 800426c:	2000120c 	.word	0x2000120c

08004270 <__malloc_lock>:
 8004270:	4801      	ldr	r0, [pc, #4]	@ (8004278 <__malloc_lock+0x8>)
 8004272:	f7ff bfa5 	b.w	80041c0 <__retarget_lock_acquire_recursive>
 8004276:	bf00      	nop
 8004278:	20001208 	.word	0x20001208

0800427c <__malloc_unlock>:
 800427c:	4801      	ldr	r0, [pc, #4]	@ (8004284 <__malloc_unlock+0x8>)
 800427e:	f7ff bfa0 	b.w	80041c2 <__retarget_lock_release_recursive>
 8004282:	bf00      	nop
 8004284:	20001208 	.word	0x20001208

08004288 <_init>:
 8004288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428a:	bf00      	nop
 800428c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428e:	bc08      	pop	{r3}
 8004290:	469e      	mov	lr, r3
 8004292:	4770      	bx	lr

08004294 <_fini>:
 8004294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004296:	bf00      	nop
 8004298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429a:	bc08      	pop	{r3}
 800429c:	469e      	mov	lr, r3
 800429e:	4770      	bx	lr
